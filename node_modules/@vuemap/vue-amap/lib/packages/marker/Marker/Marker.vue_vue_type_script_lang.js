'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var vueAmapUtil = require('@vuemap/vue-amap-util');

var script = vue.defineComponent({
  name: "ElAmapMarker",
  mixins: [vueAmapUtil.registerMixin],
  props: {
    position: {
      type: [Array, Object],
      required: true
    },
    icon: {
      type: [String, Object]
    },
    content: {
      type: [String, HTMLElement]
    },
    title: {
      type: String
    },
    offset: {
      type: [Array, Object]
    },
    anchor: {
      type: [String, Array]
    },
    angle: {
      type: Number
    },
    clickable: {
      type: Boolean,
      default: true
    },
    draggable: {
      type: Boolean,
      default: false
    },
    bubble: {
      type: Boolean,
      default: false
    },
    zooms: {
      type: Array
    },
    cursor: {
      type: String
    },
    topWhenClick: {
      type: Boolean,
      default: false
    },
    label: {
      type: Object
    },
    extData: null
  },
  emits: ["update:position"],
  data() {
    return {
      withSlot: false,
      converters: {}
    };
  },
  methods: {
    __initComponent(options) {
      if (this.$slots.default && this.$slots.default().length > 0) {
        this.withSlot = true;
        options.content = this.getSlotContent();
      }
      this.$amapComponent = new AMap.Marker(options);
      if (vueAmapUtil.isMapInstance(this.$parentComponent)) {
        this.$parentComponent.add(this.$amapComponent);
      } else if (vueAmapUtil.isOverlayGroupInstance(this.$parentComponent)) {
        this.$parentComponent.addOverlay(this.$amapComponent);
      }
      if (this.withSlot) {
        const config = { attributes: true, childList: true, subtree: true };
        const observer = new MutationObserver(() => {
          this.$amapComponent.setContent(this.getSlotContent());
        });
        observer.observe(this.$refs.content, config);
        this.observer = observer;
      }
      this.bindModelEvents();
    },
    getSlotContent() {
      return this.$refs.content;
    },
    bindModelEvents() {
      this.$amapComponent.on("dragend", () => {
        this.emitPosition();
      });
      this.$amapComponent.on("touchend", () => {
        this.emitPosition();
      });
    },
    emitPosition() {
      const position = this.$amapComponent.getPosition();
      this.$emit("update:position", position.toArray());
    },
    destroyComponent() {
      if (this.observer) {
        this.observer.disconnect();
        this.observer = null;
      }
      this.$amapComponent.setMap(null);
      this.$amapComponent = null;
      this.$parentComponent = null;
    }
  }
});

exports["default"] = script;
//# sourceMappingURL=Marker.vue_vue_type_script_lang.js.map
