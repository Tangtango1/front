'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var vueAmapUtil = require('@vuemap/vue-amap-util');

var script = vue.defineComponent({
  name: "ElAmapInfoWindow",
  mixins: [vueAmapUtil.registerMixin],
  props: {
    isCustom: {
      type: Boolean,
      default: false
    },
    autoMove: {
      type: Boolean,
      default: true
    },
    avoid: {
      type: Array
    },
    closeWhenClickMap: {
      type: Boolean,
      default: false
    },
    content: {
      type: [String, Object]
    },
    size: {
      type: Array
    },
    anchor: {
      type: String
    },
    offset: {
      type: Array
    },
    position: {
      type: Array
    }
  },
  emits: ["update:visible"],
  data() {
    return {
      converters: {}
    };
  },
  unmounted() {
    if (this.$amapComponent) {
      this.$amapComponent.close();
    }
  },
  updated() {
    if (!this.content && this.$amapComponent) {
      this.$amapComponent.setContent(this.$refs.info);
    }
  },
  methods: {
    __initComponent(options) {
      if (!options.content) {
        options.content = this.getSlotContent();
      }
      this.$amapComponent = new AMap.InfoWindow(options);
      this.$amapComponent.on("close", () => {
        this.$emit("update:visible", false);
      });
      if (this.visible !== false) {
        this.$amapComponent.open(this.$parentComponent, this.position);
      }
      if (!this.content && this.$amapComponent) {
        const config = { attributes: true, childList: true, subtree: true };
        const observer = new MutationObserver(() => {
          this.$amapComponent.setContent(this.getSlotContent());
        });
        observer.observe(this.$refs.info, config);
        this.observer = observer;
      }
    },
    getSlotContent() {
      return this.$refs.info;
    },
    destroyComponent() {
      if (this.observer) {
        this.observer.disconnect();
        this.observer = null;
      }
      if (this.$amapComponent) {
        if (this.$amapComponent.getIsOpen()) {
          this.$amapComponent.close();
        }
        this.$amapComponent = null;
        this.$parentComponent = null;
      }
    },
    __position(position) {
      if (this.visible) {
        this.$amapComponent.open(this.$parentComponent, position);
      } else {
        this.$amapComponent.setPosition(position);
      }
    },
    __visible(flag) {
      const position = this.$amapComponent.getPosition();
      if (position) {
        flag === false ? this.$amapComponent.close() : this.$amapComponent.open(this.$parentComponent, [position.lng, position.lat]);
      }
    }
  }
});

exports["default"] = script;
//# sourceMappingURL=InfoWindow.vue_vue_type_script_lang.js.map
