import { defineComponent } from 'vue';
import '../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/lodash.mjs';
import { registerMixin } from '@vuemap/vue-amap-util';
import merge from '../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/merge.mjs';

var script = defineComponent({
  name: "ElAmapGeojson",
  mixins: [registerMixin],
  props: {
    geo: {
      type: Object,
      required: true
    },
    markerOptions: {
      type: Object
    },
    getMarker: {
      type: Function
    },
    polylineOptions: {
      type: Object
    },
    getPolyline: {
      type: Function
    },
    polygonOptions: {
      type: Object
    },
    getPolygon: {
      type: Function
    }
  },
  data() {
    return {
      propsRedirect: {
        geo: "geoJSON"
      },
      converters: {}
    };
  },
  methods: {
    __initComponent(options) {
      return new Promise((resolve) => {
        AMap.plugin(["AMap.GeoJSON"], () => {
          if (!options.getMarker) {
            options.getMarker = this.createMarker;
          }
          if (!options.getPolyline) {
            options.getPolyline = this.createPolyline;
          }
          if (!options.getPolygon) {
            options.getPolygon = this.createPolygon;
          }
          this.$amapComponent = new AMap.GeoJSON(options);
          this.$parentComponent.add(this.$amapComponent);
          resolve();
        });
      });
    },
    createMarker(geojson, lnglat) {
      let options = this.markerOptions || {};
      options = merge({}, options, geojson.properties);
      options.position = lnglat;
      return new AMap.Marker(options);
    },
    createPolyline(geojson, lnglat) {
      let options = this.polylineOptions || {};
      options = merge({}, options, geojson.properties);
      options.path = lnglat;
      return new AMap.Polyline(options);
    },
    createPolygon(geojson, lnglat) {
      let options = this.polygonOptions || {};
      options = merge({}, options, geojson.properties);
      options.path = lnglat;
      return new AMap.Polygon(options);
    },
    destroyComponent() {
      if (!this.parentInstance.isDestroy) {
        this.$parentComponent.remove(this.$amapComponent);
      }
      this.$amapComponent = null;
      this.$parentComponent = null;
    },
    __geoJSON(value) {
      if (this.$amapComponent) {
        this.$amapComponent.importData(value);
      }
    }
  },
  render() {
    return null;
  }
});

export { script as default };
//# sourceMappingURL=GeoJSON.vue_vue_type_script_lang.mjs.map
