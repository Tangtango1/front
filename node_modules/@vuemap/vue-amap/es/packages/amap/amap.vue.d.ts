declare const _default: import("vue").DefineComponent<{
    vid: {
        type: StringConstructor;
    };
    center: {
        type: ArrayConstructor;
    };
    zoom: {
        type: NumberConstructor;
    };
    rotation: {
        type: NumberConstructor;
    };
    pitch: {
        type: NumberConstructor;
    };
    viewMode: {
        type: StringConstructor;
    };
    features: {
        type: ArrayConstructor;
    };
    layers: {
        type: ArrayConstructor;
    };
    zooms: {
        type: ArrayConstructor;
    };
    resizeEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    dragEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    jogEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    pitchEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    rotateEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    keyboardEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    doubleClickZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollWheel: {
        type: BooleanConstructor;
        default: boolean;
    };
    touchZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    touchZoomCenter: {
        type: NumberConstructor;
    };
    showLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultCursor: {
        type: StringConstructor;
    };
    isHotspot: {
        type: BooleanConstructor;
    };
    mapStyle: {
        type: StringConstructor;
    };
    wallColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    roofColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    showBuildingBlock: {
        type: BooleanConstructor;
        default: boolean;
    };
    showIndoorMap: {
        type: BooleanConstructor;
        default: boolean;
    };
    skyColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    labelRejectMask: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: ArrayConstructor;
    };
    WebGLParams: {
        type: ObjectConstructor;
    };
    terrain: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {}, {}, {
    createMap(): void;
    bindModelEvents(): void;
    getCenter(): any[];
    __dragEnable(flag: any): void;
    __zoomEnable(flag: any): void;
    __jogEnable(flag: any): void;
    __keyboardEnable(flag: any): void;
    __doubleClickZoom(flag: any): void;
    __scrollWheel(flag: any): void;
    __rotateEnable(flag: any): void;
    __resizeEnable(flag: any): void;
    __showIndoorMap(flag: any): void;
}, import("vue").DefineComponent<{
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: NumberConstructor;
    };
    reEventWhenUpdate: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    needInitComponents: ({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {};
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}> & {
            beforeCreate?: (() => void) | (() => void)[] | undefined;
            created?: (() => void) | (() => void)[] | undefined;
            beforeMount?: (() => void) | (() => void)[] | undefined;
            mounted?: (() => void) | (() => void)[] | undefined;
            beforeUpdate?: (() => void) | (() => void)[] | undefined;
            updated?: (() => void) | (() => void)[] | undefined;
            activated?: (() => void) | (() => void)[] | undefined;
            deactivated?: (() => void) | (() => void)[] | undefined;
            beforeDestroy?: (() => void) | (() => void)[] | undefined;
            beforeUnmount?: (() => void) | (() => void)[] | undefined;
            destroyed?: (() => void) | (() => void)[] | undefined;
            unmounted?: (() => void) | (() => void)[] | undefined;
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[] | undefined;
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[] | undefined;
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[] | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & import("vue").ShallowUnwrapRef<{}> & import("vue").ComponentCustomProperties & customComponent)[];
    unwatchFns: import("vue").WatchStopHandle[];
    propsRedirect: {};
    converters: {};
    isDestroy: boolean;
    cacheEvents: {};
    isMounted: boolean;
}, {}, {
    getHandlerFun(prop: any): any;
    convertProps(): {};
    convertSignalProp(key: any, sourceData: any): any;
    registerEvents(): void;
    unregisterEvents(): void;
    setPropWatchers(): void;
    initProps(): void;
    lazyRegister(): void;
    addChildComponent(component: {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {};
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & customComponent): void;
    createChildren(): void;
    register(): void;
    registerRest(instance: any): void;
    $$getInstance(): any;
    destroyComponent(): void;
    __visible(flag: any): void;
    __zIndex(value: any): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: NumberConstructor;
    };
    reEventWhenUpdate: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    reEventWhenUpdate: boolean;
}>, import("vue").ComponentOptionsMixin, ("update:zoom" | "update:center" | "update:rotation" | "update:pitch")[], "update:zoom" | "update:center" | "update:rotation" | "update:pitch", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    vid: {
        type: StringConstructor;
    };
    center: {
        type: ArrayConstructor;
    };
    zoom: {
        type: NumberConstructor;
    };
    rotation: {
        type: NumberConstructor;
    };
    pitch: {
        type: NumberConstructor;
    };
    viewMode: {
        type: StringConstructor;
    };
    features: {
        type: ArrayConstructor;
    };
    layers: {
        type: ArrayConstructor;
    };
    zooms: {
        type: ArrayConstructor;
    };
    resizeEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    dragEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    jogEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    pitchEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    rotateEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    keyboardEnable: {
        type: BooleanConstructor;
        default: boolean;
    };
    doubleClickZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollWheel: {
        type: BooleanConstructor;
        default: boolean;
    };
    touchZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    touchZoomCenter: {
        type: NumberConstructor;
    };
    showLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultCursor: {
        type: StringConstructor;
    };
    isHotspot: {
        type: BooleanConstructor;
    };
    mapStyle: {
        type: StringConstructor;
    };
    wallColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    roofColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    showBuildingBlock: {
        type: BooleanConstructor;
        default: boolean;
    };
    showIndoorMap: {
        type: BooleanConstructor;
        default: boolean;
    };
    skyColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    labelRejectMask: {
        type: BooleanConstructor;
        default: boolean;
    };
    mask: {
        type: ArrayConstructor;
    };
    WebGLParams: {
        type: ObjectConstructor;
    };
    terrain: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:zoom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:center"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rotation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pitch"?: ((...args: any[]) => any) | undefined;
}, {
    resizeEnable: boolean;
    dragEnable: boolean;
    zoomEnable: boolean;
    jogEnable: boolean;
    pitchEnable: boolean;
    rotateEnable: boolean;
    animateEnable: boolean;
    keyboardEnable: boolean;
    doubleClickZoom: boolean;
    scrollWheel: boolean;
    touchZoom: boolean;
    showLabel: boolean;
    isHotspot: boolean;
    showBuildingBlock: boolean;
    showIndoorMap: boolean;
    labelRejectMask: boolean;
    terrain: boolean;
}>;
export default _default;
