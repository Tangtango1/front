import { defineComponent } from 'vue';
import { registerMixin, guid } from '@vuemap/vue-amap-util';
import '../../services/index.mjs';
import { lazyAMapApiLoaderInstance } from '../../services/injected-amap-api-instance.mjs';

var script = defineComponent({
  name: "ElAmap",
  mixins: [registerMixin],
  provide() {
    return {
      parentInstance: this
    };
  },
  props: {
    vid: {
      type: String
    },
    center: {
      type: Array
    },
    zoom: {
      type: Number
    },
    rotation: {
      type: Number
    },
    pitch: {
      type: Number
    },
    viewMode: {
      type: String
    },
    features: {
      type: Array
    },
    layers: {
      type: Array
    },
    zooms: {
      type: Array
    },
    resizeEnable: {
      type: Boolean,
      default: true
    },
    dragEnable: {
      type: Boolean,
      default: true
    },
    zoomEnable: {
      type: Boolean,
      default: true
    },
    jogEnable: {
      type: Boolean,
      default: true
    },
    pitchEnable: {
      type: Boolean,
      default: true
    },
    rotateEnable: {
      type: Boolean,
      default: true
    },
    animateEnable: {
      type: Boolean,
      default: true
    },
    keyboardEnable: {
      type: Boolean,
      default: true
    },
    doubleClickZoom: {
      type: Boolean,
      default: true
    },
    scrollWheel: {
      type: Boolean,
      default: true
    },
    touchZoom: {
      type: Boolean,
      default: true
    },
    touchZoomCenter: {
      type: Number
    },
    showLabel: {
      type: Boolean,
      default: true
    },
    defaultCursor: {
      type: String
    },
    isHotspot: {
      type: Boolean
    },
    mapStyle: {
      type: String
    },
    wallColor: {
      type: [String, Array]
    },
    roofColor: {
      type: [String, Array]
    },
    showBuildingBlock: {
      type: Boolean,
      default: true
    },
    showIndoorMap: {
      type: Boolean,
      default: false
    },
    skyColor: {
      type: [String, Array]
    },
    labelRejectMask: {
      type: Boolean,
      default: false
    },
    mask: {
      type: Array
    },
    WebGLParams: {
      type: Object
    },
    terrain: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:zoom", "update:center", "update:rotation", "update:pitch"],
  data() {
    return {};
  },
  computed: {},
  mounted() {
    this.createMap();
  },
  beforeUnmount() {
    if (this.$amapComponent) {
      this.$amapComponent.destroy();
      this.$amapComponent = null;
      this.$parentComponent = null;
    }
  },
  methods: {
    createMap() {
      lazyAMapApiLoaderInstance.then(() => {
        const mapElement = this.$el.querySelector(".el-vue-amap");
        const elementID = this.vid || guid();
        mapElement.id = elementID;
        this.$nextTick(() => {
          this.$amapComponent = new AMap.Map(elementID, this.convertProps());
          this.register();
          this.bindModelEvents();
        });
      }).catch((e) => {
        console.warn("init map error: ", e);
      });
    },
    bindModelEvents() {
      this.$amapComponent.on("zoomchange", () => {
        this.$emit("update:zoom", this.$amapComponent.getZoom());
      });
      this.$amapComponent.on("rotatechange", () => {
        this.$emit("update:rotation", this.$amapComponent.getRotation());
        this.$emit("update:pitch", this.$amapComponent.getPitch());
      });
      this.$amapComponent.on("dragging", () => {
        this.$emit("update:center", this.getCenter());
        this.$emit("update:pitch", this.$amapComponent.getPitch());
      });
      this.$amapComponent.on("touchmove", () => {
        this.$emit("update:center", this.getCenter());
      });
    },
    getCenter() {
      const center = this.$amapComponent.getCenter();
      return [center.lng, center.lat];
    },
    __dragEnable(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ dragEnable: flag });
      }
    },
    __zoomEnable(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ zoomEnable: flag });
      }
    },
    __jogEnable(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ jogEnable: flag });
      }
    },
    __keyboardEnable(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ keyboardEnable: flag });
      }
    },
    __doubleClickZoom(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ doubleClickZoom: flag });
      }
    },
    __scrollWheel(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ scrollWheel: flag });
      }
    },
    __rotateEnable(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ rotateEnable: flag });
      }
    },
    __resizeEnable(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ resizeEnable: flag });
      }
    },
    __showIndoorMap(flag) {
      if (this.$amapComponent) {
        this.$amapComponent.setStatus({ showIndoorMap: flag });
      }
    }
  }
});

export { script as default };
//# sourceMappingURL=amap.vue_vue_type_script_lang.mjs.map
