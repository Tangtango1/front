{"ast":null,"code":"import SetCache from './_SetCache.mjs';\nimport arrayIncludes from './_arrayIncludes.mjs';\nimport arrayIncludesWith from './_arrayIncludesWith.mjs';\nimport arrayMap from './_arrayMap.mjs';\nimport baseUnary from './_baseUnary.mjs';\nimport cacheHas from './_cacheHas.mjs';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n    includes = arrayIncludes,\n    isCommon = true,\n    length = array.length,\n    result = [],\n    valuesLength = values.length;\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  } else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer: while (++index < length) {\n    var value = array[index],\n      computed = iteratee == null ? value : iteratee(value);\n    value = comparator || value !== 0 ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    } else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\nexport { baseDifference as default };","map":{"version":3,"names":["LARGE_ARRAY_SIZE","baseDifference","array","values","iteratee","comparator","index","includes","arrayIncludes","isCommon","length","result","valuesLength","arrayMap","baseUnary","arrayIncludesWith","cacheHas","SetCache","outer","value","computed","valuesIndex","push"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseDifference.js"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n"],"mappings":";;;;;;;AAOA;AACA,IAAIA,gBAAgB,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EAC3D,IAAIC,KAAK,GAAG,CAAC,CAAC;IACVC,QAAQ,GAAGC,aAAa;IACxBC,QAAQ,GAAG,IAAI;IACfC,MAAM,GAAGR,KAAK,CAACQ,MAAM;IACrBC,MAAM,GAAG,EAAE;IACXC,YAAY,GAAGT,MAAM,CAACO,MAAM;EAEhC,IAAI,CAACA,MAAM,EAAE;IACX,OAAOC,MAAM;EACjB;EACE,IAAIP,QAAQ,EAAE;IACZD,MAAM,GAAGU,QAAQ,CAACV,MAAM,EAAEW,SAAS,CAACV,QAAQ,CAAC,CAAC;EAClD;EACE,IAAIC,UAAU,EAAE;IACdE,QAAQ,GAAGQ,iBAAiB;IAC5BN,QAAQ,GAAG,KAAK;EACpB,CAAG,MACI,IAAIN,MAAM,CAACO,MAAM,IAAIV,gBAAgB,EAAE;IAC1CO,QAAQ,GAAGS,QAAQ;IACnBP,QAAQ,GAAG,KAAK;IAChBN,MAAM,GAAG,IAAIc,QAAQ,CAACd,MAAM,CAAC;EACjC;EACEe,KAAK,EACL,OAAO,EAAEZ,KAAK,GAAGI,MAAM,EAAE;IACvB,IAAIS,KAAK,GAAGjB,KAAK,CAACI,KAAK,CAAC;MACpBc,QAAQ,GAAGhB,QAAQ,IAAI,IAAI,GAAGe,KAAK,GAAGf,QAAQ,CAACe,KAAK,CAAC;IAEzDA,KAAK,GAAId,UAAU,IAAIc,KAAK,KAAK,CAAC,GAAIA,KAAK,GAAG,CAAC;IAC/C,IAAIV,QAAQ,IAAIW,QAAQ,KAAKA,QAAQ,EAAE;MACrC,IAAIC,WAAW,GAAGT,YAAY;MAC9B,OAAOS,WAAW,EAAE,EAAE;QACpB,IAAIlB,MAAM,CAACkB,WAAW,CAAC,KAAKD,QAAQ,EAAE;UACpC,SAASF,KAAK;QACxB;MACA;MACMP,MAAM,CAACW,IAAI,CAACH,KAAK,CAAC;IACxB,CAAK,MACI,IAAI,CAACZ,QAAQ,CAACJ,MAAM,EAAEiB,QAAQ,EAAEf,UAAU,CAAC,EAAE;MAChDM,MAAM,CAACW,IAAI,CAACH,KAAK,CAAC;IACxB;EACA;EACE,OAAOR,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}