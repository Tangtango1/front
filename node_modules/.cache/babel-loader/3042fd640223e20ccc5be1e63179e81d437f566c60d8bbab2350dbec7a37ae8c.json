{"ast":null,"code":"import Stack from './_Stack.mjs';\nimport arrayEach from './_arrayEach.mjs';\nimport assignValue from './_assignValue.mjs';\nimport baseAssign from './_baseAssign.mjs';\nimport baseAssignIn from './_baseAssignIn.mjs';\nimport cloneBuffer from './_cloneBuffer.mjs';\nimport copyArray from './_copyArray.mjs';\nimport copySymbols from './_copySymbols.mjs';\nimport copySymbolsIn from './_copySymbolsIn.mjs';\nimport getAllKeys from './_getAllKeys.mjs';\nimport getAllKeysIn from './_getAllKeysIn.mjs';\nimport getTag from './_getTag.mjs';\nimport initCloneArray from './_initCloneArray.mjs';\nimport initCloneByTag from './_initCloneByTag.mjs';\nimport initCloneObject from './_initCloneObject.mjs';\nimport isArray from './isArray.mjs';\nimport isBuffer from './isBuffer.mjs';\nimport isMap from './isMap.mjs';\nimport isObject from './isObject.mjs';\nimport isSet from './isSet.mjs';\nimport keys from './keys.mjs';\nimport keysIn from './keysIn.mjs';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n  CLONE_FLAT_FLAG = 2,\n  CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n  arrayTag = '[object Array]',\n  boolTag = '[object Boolean]',\n  dateTag = '[object Date]',\n  errorTag = '[object Error]',\n  funcTag = '[object Function]',\n  genTag = '[object GeneratorFunction]',\n  mapTag = '[object Map]',\n  numberTag = '[object Number]',\n  objectTag = '[object Object]',\n  regexpTag = '[object RegExp]',\n  setTag = '[object Set]',\n  stringTag = '[object String]',\n  symbolTag = '[object Symbol]',\n  weakMapTag = '[object WeakMap]';\nvar arrayBufferTag = '[object ArrayBuffer]',\n  dataViewTag = '[object DataView]',\n  float32Tag = '[object Float32Array]',\n  float64Tag = '[object Float64Array]',\n  int8Tag = '[object Int8Array]',\n  int16Tag = '[object Int16Array]',\n  int32Tag = '[object Int32Array]',\n  uint8Tag = '[object Uint8Array]',\n  uint8ClampedTag = '[object Uint8ClampedArray]',\n  uint16Tag = '[object Uint16Array]',\n  uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n    isDeep = bitmask & CLONE_DEEP_FLAG,\n    isFlat = bitmask & CLONE_FLAT_FLAG,\n    isFull = bitmask & CLONE_SYMBOLS_FLAG;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n      isFunc = tag == funcTag || tag == genTag;\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || isFunc && !object) {\n      result = isFlat || isFunc ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack());\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n  if (isSet(value)) {\n    value.forEach(function (subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function (subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function (subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\nexport { baseClone as default };","map":{"version":3,"names":["CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","cloneableTags","baseClone","value","bitmask","customizer","key","object","stack","result","isDeep","isFlat","isFull","undefined","isObject","isArr","isArray","initCloneArray","copyArray","tag","getTag","isFunc","isBuffer","cloneBuffer","initCloneObject","copySymbolsIn","baseAssignIn","copySymbols","baseAssign","initCloneByTag","Stack","stacked","get","set","isSet","forEach","subValue","add","isMap","keysFunc","getAllKeysIn","getAllKeys","keysIn","keys","props","arrayEach","assignValue"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js"],"sourcesContent":["import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\nimport keysIn from './keysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}