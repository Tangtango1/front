{"ast":null,"code":"// src/utils/request.js\nimport axios from 'axios';\nimport router from '@/router';\nimport storage from '@/utils/storage';\nconst http = axios.create({\n  baseURL: '/xiaoyuanshitangdingcan',\n  timeout: 1000 * 86400,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\n\n// 请求拦截：统一添加Token\nhttp.interceptors.request.use(config => {\n  const token = storage.get('Token');\n  if (token) {\n    config.headers['Token'] = token; // 推荐标准格式\n    // 或 config.headers['Token'] = token; // 根据后端要求选择\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截：处理401和其他错误\nhttp.interceptors.response.use(response => {\n  if (response.data?.code === 401) {\n    handleUnauthorized();\n  }\n  return response.data; // 直接返回后端数据，避免嵌套\n}, error => {\n  if (error.response?.status === 401) {\n    handleUnauthorized();\n  }\n  return Promise.reject(error);\n});\nconst handleUnauthorized = () => {\n  storage.remove('Token');\n  router.push({\n    name: 'login',\n    query: {\n      redirect: router.currentRoute.fullPath\n    } // 记录跳转来源\n  });\n};\nexport default http;","map":{"version":3,"names":["axios","router","storage","http","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","get","error","Promise","reject","response","data","code","handleUnauthorized","status","remove","push","name","query","redirect","currentRoute","fullPath"],"sources":["D:/bise/bise/front/src/utils/http.js"],"sourcesContent":["// src/utils/request.js\nimport axios from 'axios';\nimport router from '@/router';\nimport storage from '@/utils/storage';\n\nconst http = axios.create({\n  baseURL: '/xiaoyuanshitangdingcan',\n  timeout: 1000 * 86400,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n  },\n});\n\n// 请求拦截：统一添加Token\nhttp.interceptors.request.use(config => {\n  const token = storage.get('Token');\n  if (token) {\n     config.headers['Token'] = token; // 推荐标准格式\n    // 或 config.headers['Token'] = token; // 根据后端要求选择\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截：处理401和其他错误\nhttp.interceptors.response.use(\n  response => {\n    if (response.data?.code === 401) {\n      handleUnauthorized();\n    }\n    return response.data; // 直接返回后端数据，避免嵌套\n  },\n  error => {\n    if (error.response?.status === 401) {\n      handleUnauthorized();\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst handleUnauthorized = () => {\n  storage.remove('Token');\n  router.push({ \n    name: 'login',\n    query: { redirect: router.currentRoute.fullPath } // 记录跳转来源\n  });\n};\n\nexport default http;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,iBAAiB;AAErC,MAAMC,IAAI,GAAGH,KAAK,CAACI,MAAM,CAAC;EACxBC,OAAO,EAAE,yBAAyB;EAClCC,OAAO,EAAE,IAAI,GAAG,KAAK;EACrBC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAL,IAAI,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACtC,MAAMC,KAAK,GAAGX,OAAO,CAACY,GAAG,CAAC,OAAO,CAAC;EAClC,IAAID,KAAK,EAAE;IACRD,MAAM,CAACJ,OAAO,CAAC,OAAO,CAAC,GAAGK,KAAK,CAAC,CAAC;IAClC;EACF;EACA,OAAOD,MAAM;AACf,CAAC,EAAEG,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;;AAElC;AACAZ,IAAI,CAACM,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC5BO,QAAQ,IAAI;EACV,IAAIA,QAAQ,CAACC,IAAI,EAAEC,IAAI,KAAK,GAAG,EAAE;IAC/BC,kBAAkB,CAAC,CAAC;EACtB;EACA,OAAOH,QAAQ,CAACC,IAAI,CAAC,CAAC;AACxB,CAAC,EACDJ,KAAK,IAAI;EACP,IAAIA,KAAK,CAACG,QAAQ,EAAEI,MAAM,KAAK,GAAG,EAAE;IAClCD,kBAAkB,CAAC,CAAC;EACtB;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,MAAMM,kBAAkB,GAAGA,CAAA,KAAM;EAC/BnB,OAAO,CAACqB,MAAM,CAAC,OAAO,CAAC;EACvBtB,MAAM,CAACuB,IAAI,CAAC;IACVC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE;MAAEC,QAAQ,EAAE1B,MAAM,CAAC2B,YAAY,CAACC;IAAS,CAAC,CAAC;EACpD,CAAC,CAAC;AACJ,CAAC;AAED,eAAe1B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}