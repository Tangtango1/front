{"ast":null,"code":"import baseToString from './_baseToString.mjs';\nimport castSlice from './_castSlice.mjs';\nimport charsEndIndex from './_charsEndIndex.mjs';\nimport stringToArray from './_stringToArray.mjs';\nimport toString from './toString.mjs';\nimport trimmedEndIndex from './_trimmedEndIndex.mjs';\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.slice(0, trimmedEndIndex(string) + 1);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n  return castSlice(strSymbols, 0, end).join('');\n}\nexport { trimEnd as default };","map":{"version":3,"names":["trimEnd","string","chars","guard","toString","undefined","slice","trimmedEndIndex","baseToString","strSymbols","stringToArray","end","charsEndIndex","castSlice","join"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/trimEnd.js"],"sourcesContent":["import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\nimport trimmedEndIndex from './_trimmedEndIndex.js';\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.slice(0, trimmedEndIndex(string) + 1);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nexport default trimEnd;\n"],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAOA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACrCF,MAAM,GAAGG,QAAQ,CAACH,MAAM,CAAC;EACzB,IAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKG,SAAS,CAAC,EAAE;IAC5C,OAAOJ,MAAM,CAACK,KAAK,CAAC,CAAC,EAAEC,eAAe,CAACN,MAAM,CAAC,GAAG,CAAC,CAAC;EACvD;EACE,IAAI,CAACA,MAAM,IAAI,EAAEC,KAAK,GAAGM,YAAY,CAACN,KAAK,CAAC,CAAC,EAAE;IAC7C,OAAOD,MAAM;EACjB;EACE,IAAIQ,UAAU,GAAGC,aAAa,CAACT,MAAM,CAAC;IAClCU,GAAG,GAAGC,aAAa,CAACH,UAAU,EAAEC,aAAa,CAACR,KAAK,CAAC,CAAC,GAAG,CAAC;EAE7D,OAAOW,SAAS,CAACJ,UAAU,EAAE,CAAC,EAAEE,GAAG,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC;AAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}