{"ast":null,"code":"import baseToString from './_baseToString.mjs';\nimport baseTrim from './_baseTrim.mjs';\nimport castSlice from './_castSlice.mjs';\nimport charsEndIndex from './_charsEndIndex.mjs';\nimport charsStartIndex from './_charsStartIndex.mjs';\nimport stringToArray from './_stringToArray.mjs';\nimport toString from './toString.mjs';\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n    chrSymbols = stringToArray(chars),\n    start = charsStartIndex(strSymbols, chrSymbols),\n    end = charsEndIndex(strSymbols, chrSymbols) + 1;\n  return castSlice(strSymbols, start, end).join('');\n}\nexport { trim as default };","map":{"version":3,"names":["trim","string","chars","guard","toString","undefined","baseTrim","baseToString","strSymbols","stringToArray","chrSymbols","start","charsStartIndex","end","charsEndIndex","castSlice","join"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/trim.js"],"sourcesContent":["import baseToString from './_baseToString.js';\nimport baseTrim from './_baseTrim.js';\nimport castSlice from './_castSlice.js';\nimport charsEndIndex from './_charsEndIndex.js';\nimport charsStartIndex from './_charsStartIndex.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nexport default trim;\n"],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAIA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAClCF,MAAM,GAAGG,QAAQ,CAACH,MAAM,CAAC;EACzB,IAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKG,SAAS,CAAC,EAAE;IAC5C,OAAOC,QAAQ,CAACL,MAAM,CAAC;EAC3B;EACE,IAAI,CAACA,MAAM,IAAI,EAAEC,KAAK,GAAGK,YAAY,CAACL,KAAK,CAAC,CAAC,EAAE;IAC7C,OAAOD,MAAM;EACjB;EACE,IAAIO,UAAU,GAAGC,aAAa,CAACR,MAAM,CAAC;IAClCS,UAAU,GAAGD,aAAa,CAACP,KAAK,CAAC;IACjCS,KAAK,GAAGC,eAAe,CAACJ,UAAU,EAAEE,UAAU,CAAC;IAC/CG,GAAG,GAAGC,aAAa,CAACN,UAAU,EAAEE,UAAU,CAAC,GAAG,CAAC;EAEnD,OAAOK,SAAS,CAACP,UAAU,EAAEG,KAAK,EAAEE,GAAG,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC;AACnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}