{"ast":null,"code":"import axios from 'axios';\nimport router from '../router/router-static';\nimport storage from '@/utils/storage';\nconst http = axios.create({\n  baseURL: '/xiaoyuanshitangdingcan',\n  timeout: 1000 * 86400,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\n\n// 请求拦截\nhttp.interceptors.request.use(config => {\n  const token = storage.get('Token');\n  if (token) {\n    config.headers['Token'] = token; // 关键点：与后端 LOGIN_TOKEN_KEY 一致\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截\nhttp.interceptors.response.use(response => {\n  // 确保 response.data 存在\n  if (!response.data) {\n    throw new Error('Empty API response');\n  }\n\n  // 统一处理错误码\n  if (response.data.code && response.data.code === 401) {\n    handleUnauthorized();\n    return Promise.reject(response.data);\n  }\n\n  // 返回有效数据（确保包含 msg 字段）\n  return {\n    code: 200,\n    msg: response.data.msg || '操作成功',\n    // 默认值\n    data: response.data.data || response.data\n  };\n}, error => {\n  // 处理网络错误\n  if (error.response) {\n    return Promise.reject({\n      code: error.response.status,\n      msg: error.response.data?.msg || '请求失败',\n      data: null\n    });\n  }\n  return Promise.reject({\n    code: 500,\n    msg: '网络错误',\n    data: null\n  });\n});\nconst handleUnauthorized = () => {\n  storage.remove('Token');\n  router.push({\n    name: 'login',\n    query: {\n      redirect: router.currentRoute.fullPath\n    }\n  });\n};\nexport default http;","map":{"version":3,"names":["axios","router","storage","http","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","get","error","Promise","reject","response","data","Error","code","handleUnauthorized","msg","status","remove","push","name","query","redirect","currentRoute","fullPath"],"sources":["D:/bise/bise/front/src/utils/http.js"],"sourcesContent":["import axios from 'axios';\nimport router from '../router/router-static';\nimport storage from '@/utils/storage';\n\nconst http = axios.create({\n    baseURL: '/xiaoyuanshitangdingcan',\n    timeout: 1000 * 86400,\n    withCredentials: true,\n    headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n    }\n});\n\n// 请求拦截\nhttp.interceptors.request.use(config => {\n    const token = storage.get('Token');\n    if (token) {\n        config.headers['Token'] = token; // 关键点：与后端 LOGIN_TOKEN_KEY 一致\n    }\n    return config;\n}, error => Promise.reject(error));\n\n// 响应拦截\nhttp.interceptors.response.use(\n  response => {\n    // 确保 response.data 存在\n    if (!response.data) {\n      throw new Error('Empty API response');\n    }\n    \n    // 统一处理错误码\n    if (response.data.code && response.data.code === 401) {\n      handleUnauthorized();\n      return Promise.reject(response.data);\n    }\n    \n    // 返回有效数据（确保包含 msg 字段）\n    return {\n      code: 200,\n      msg: response.data.msg || '操作成功', // 默认值\n      data: response.data.data || response.data\n    };\n  },\n  error => {\n    // 处理网络错误\n    if (error.response) {\n      return Promise.reject({\n        code: error.response.status,\n        msg: error.response.data?.msg || '请求失败',\n        data: null\n      });\n    }\n    return Promise.reject({\n      code: 500,\n      msg: '网络错误',\n      data: null\n    });\n  }\n);\n\nconst handleUnauthorized = () => {\n    storage.remove('Token');\n    router.push({\n        name: 'login',\n        query: { redirect: router.currentRoute.fullPath }\n    });\n};\n\nexport default http;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,OAAO,MAAM,iBAAiB;AAErC,MAAMC,IAAI,GAAGH,KAAK,CAACI,MAAM,CAAC;EACtBC,OAAO,EAAE,yBAAyB;EAClCC,OAAO,EAAE,IAAI,GAAG,KAAK;EACrBC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAL,IAAI,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACpC,MAAMC,KAAK,GAAGX,OAAO,CAACY,GAAG,CAAC,OAAO,CAAC;EAClC,IAAID,KAAK,EAAE;IACPD,MAAM,CAACJ,OAAO,CAAC,OAAO,CAAC,GAAGK,KAAK,CAAC,CAAC;EACrC;EACA,OAAOD,MAAM;AACjB,CAAC,EAAEG,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;;AAElC;AACAZ,IAAI,CAACM,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC5BO,QAAQ,IAAI;EACV;EACA,IAAI,CAACA,QAAQ,CAACC,IAAI,EAAE;IAClB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;EACvC;;EAEA;EACA,IAAIF,QAAQ,CAACC,IAAI,CAACE,IAAI,IAAIH,QAAQ,CAACC,IAAI,CAACE,IAAI,KAAK,GAAG,EAAE;IACpDC,kBAAkB,CAAC,CAAC;IACpB,OAAON,OAAO,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;EACtC;;EAEA;EACA,OAAO;IACLE,IAAI,EAAE,GAAG;IACTE,GAAG,EAAEL,QAAQ,CAACC,IAAI,CAACI,GAAG,IAAI,MAAM;IAAE;IAClCJ,IAAI,EAAED,QAAQ,CAACC,IAAI,CAACA,IAAI,IAAID,QAAQ,CAACC;EACvC,CAAC;AACH,CAAC,EACDJ,KAAK,IAAI;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB,OAAOF,OAAO,CAACC,MAAM,CAAC;MACpBI,IAAI,EAAEN,KAAK,CAACG,QAAQ,CAACM,MAAM;MAC3BD,GAAG,EAAER,KAAK,CAACG,QAAQ,CAACC,IAAI,EAAEI,GAAG,IAAI,MAAM;MACvCJ,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;EACA,OAAOH,OAAO,CAACC,MAAM,CAAC;IACpBI,IAAI,EAAE,GAAG;IACTE,GAAG,EAAE,MAAM;IACXJ,IAAI,EAAE;EACR,CAAC,CAAC;AACJ,CACF,CAAC;AAED,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;EAC7BpB,OAAO,CAACuB,MAAM,CAAC,OAAO,CAAC;EACvBxB,MAAM,CAACyB,IAAI,CAAC;IACRC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE;MAAEC,QAAQ,EAAE5B,MAAM,CAAC6B,YAAY,CAACC;IAAS;EACpD,CAAC,CAAC;AACN,CAAC;AAED,eAAe5B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}