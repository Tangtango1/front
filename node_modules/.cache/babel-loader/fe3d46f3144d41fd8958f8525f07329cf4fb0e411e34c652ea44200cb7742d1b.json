{"ast":null,"code":"// src/utils/request.js\nimport axios from 'axios';\nimport router from '../router';\nimport storage from '@/utils/storage';\nconst http = axios.create({\n  baseURL: '/xiaoyuanshitangdingcan',\n  timeout: 1000 * 86400,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\n\n// 请求拦截：统一添加Token\nhttp.interceptors.request.use(config => {\n  const token = storage.get('Token');\n  if (token) {\n    config.headers['Token'] = token; // 与后端 LOGIN_TOKEN_KEY 保持一致\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截：统一处理响应\nhttp.interceptors.response.use(response => {\n  // 成功响应（2xx）\n  const data = response.data || {};\n\n  // 处理业务逻辑错误（如401）\n  if (data.code === 401) {\n    handleUnauthorized();\n    return Promise.reject(data);\n  }\n\n  // 标准化成功响应\n  return {\n    code: 200,\n    msg: data.msg || '操作成功',\n    data: data.data || data\n  };\n}, error => {\n  // 网络错误或服务器错误（非2xx）\n  if (error.response) {\n    // 401处理\n    if (error.response.status === 401) {\n      handleUnauthorized();\n    }\n    return Promise.reject({\n      code: error.response.status,\n      msg: error.response.data?.msg || `请求失败: ${error.response.statusText}`,\n      data: null\n    });\n  }\n\n  // 无响应错误（如网络断开）\n  return Promise.reject({\n    code: -1,\n    msg: '网络连接异常',\n    data: null\n  });\n});\nconst handleUnauthorized = () => {\n  storage.remove('Token');\n  router.push({\n    name: 'login',\n    query: {\n      redirect: router.currentRoute.fullPath\n    }\n  });\n};\nexport default http;","map":{"version":3,"names":["axios","router","storage","http","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","get","error","Promise","reject","response","data","code","handleUnauthorized","msg","status","statusText","remove","push","name","query","redirect","currentRoute","fullPath"],"sources":["D:/bise/bise/front/src/utils/http.js"],"sourcesContent":["// src/utils/request.js\nimport axios from 'axios';\nimport router from '../router';\nimport storage from '@/utils/storage';\n\nconst http = axios.create({\n  baseURL: '/xiaoyuanshitangdingcan',\n  timeout: 1000 * 86400,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8',\n  },\n});\n\n// 请求拦截：统一添加Token\nhttp.interceptors.request.use(config => {\n  const token = storage.get('Token');\n  if (token) {\n    config.headers['Token'] = token; // 与后端 LOGIN_TOKEN_KEY 保持一致\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截：统一处理响应\nhttp.interceptors.response.use(\n  response => {\n    // 成功响应（2xx）\n    const data = response.data || {};\n    \n    // 处理业务逻辑错误（如401）\n    if (data.code === 401) {\n      handleUnauthorized();\n      return Promise.reject(data);\n    }\n    \n    // 标准化成功响应\n    return {\n      code: 200,\n      msg: data.msg || '操作成功',\n      data: data.data || data\n    };\n  },\n  error => {\n    // 网络错误或服务器错误（非2xx）\n    if (error.response) {\n      // 401处理\n      if (error.response.status === 401) {\n        handleUnauthorized();\n      }\n      \n      return Promise.reject({\n        code: error.response.status,\n        msg: error.response.data?.msg || `请求失败: ${error.response.statusText}`,\n        data: null\n      });\n    }\n    \n    // 无响应错误（如网络断开）\n    return Promise.reject({\n      code: -1,\n      msg: '网络连接异常',\n      data: null\n    });\n  }\n);\n\nconst handleUnauthorized = () => {\n  storage.remove('Token');\n  router.push({ \n    name: 'login',\n    query: { redirect: router.currentRoute.fullPath }\n  });\n};\n\nexport default http;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,OAAO,MAAM,iBAAiB;AAErC,MAAMC,IAAI,GAAGH,KAAK,CAACI,MAAM,CAAC;EACxBC,OAAO,EAAE,yBAAyB;EAClCC,OAAO,EAAE,IAAI,GAAG,KAAK;EACrBC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAL,IAAI,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACtC,MAAMC,KAAK,GAAGX,OAAO,CAACY,GAAG,CAAC,OAAO,CAAC;EAClC,IAAID,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,OAAO,CAAC,GAAGK,KAAK,CAAC,CAAC;EACnC;EACA,OAAOD,MAAM;AACf,CAAC,EAAEG,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;;AAElC;AACAZ,IAAI,CAACM,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC5BO,QAAQ,IAAI;EACV;EACA,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,IAAI,CAAC,CAAC;;EAEhC;EACA,IAAIA,IAAI,CAACC,IAAI,KAAK,GAAG,EAAE;IACrBC,kBAAkB,CAAC,CAAC;IACpB,OAAOL,OAAO,CAACC,MAAM,CAACE,IAAI,CAAC;EAC7B;;EAEA;EACA,OAAO;IACLC,IAAI,EAAE,GAAG;IACTE,GAAG,EAAEH,IAAI,CAACG,GAAG,IAAI,MAAM;IACvBH,IAAI,EAAEA,IAAI,CAACA,IAAI,IAAIA;EACrB,CAAC;AACH,CAAC,EACDJ,KAAK,IAAI;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,IAAIH,KAAK,CAACG,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;MACjCF,kBAAkB,CAAC,CAAC;IACtB;IAEA,OAAOL,OAAO,CAACC,MAAM,CAAC;MACpBG,IAAI,EAAEL,KAAK,CAACG,QAAQ,CAACK,MAAM;MAC3BD,GAAG,EAAEP,KAAK,CAACG,QAAQ,CAACC,IAAI,EAAEG,GAAG,IAAI,SAASP,KAAK,CAACG,QAAQ,CAACM,UAAU,EAAE;MACrEL,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;;EAEA;EACA,OAAOH,OAAO,CAACC,MAAM,CAAC;IACpBG,IAAI,EAAE,CAAC,CAAC;IACRE,GAAG,EAAE,QAAQ;IACbH,IAAI,EAAE;EACR,CAAC,CAAC;AACJ,CACF,CAAC;AAED,MAAME,kBAAkB,GAAGA,CAAA,KAAM;EAC/BnB,OAAO,CAACuB,MAAM,CAAC,OAAO,CAAC;EACvBxB,MAAM,CAACyB,IAAI,CAAC;IACVC,IAAI,EAAE,OAAO;IACbC,KAAK,EAAE;MAAEC,QAAQ,EAAE5B,MAAM,CAAC6B,YAAY,CAACC;IAAS;EAClD,CAAC,CAAC;AACJ,CAAC;AAED,eAAe5B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}