{"ast":null,"code":"import baseSlice from './_baseSlice.mjs';\nimport isIterateeCall from './_isIterateeCall.mjs';\nimport toInteger from './toInteger.mjs';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n  nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if (guard ? isIterateeCall(array, size, guard) : size === undefined) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n    resIndex = 0,\n    result = Array(nativeCeil(length / size));\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, index += size);\n  }\n  return result;\n}\nexport { chunk as default };","map":{"version":3,"names":["nativeCeil","Math","ceil","nativeMax","max","chunk","array","size","guard","isIterateeCall","undefined","toInteger","length","index","resIndex","result","Array","baseSlice"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/chunk.js"],"sourcesContent":["import baseSlice from './_baseSlice.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nexport default chunk;\n"],"mappings":";;;;AAIA;AACA,IAAIA,UAAU,GAAGC,IAAI,CAACC,IAAI;EACtBC,SAAS,GAAGF,IAAI,CAACG,GAAG;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAE;EACjC,IAAKA,KAAK,GAAGC,cAAc,CAACH,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC,GAAGD,IAAI,KAAKG,SAAS,EAAG;IACrEH,IAAI,GAAG,CAAC;EACZ,CAAG,MAAM;IACLA,IAAI,GAAGJ,SAAS,CAACQ,SAAS,CAACJ,IAAI,CAAC,EAAE,CAAC,CAAC;EACxC;EACE,IAAIK,MAAM,GAAGN,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGA,KAAK,CAACM,MAAM;EAC7C,IAAI,CAACA,MAAM,IAAIL,IAAI,GAAG,CAAC,EAAE;IACvB,OAAO,EAAE;EACb;EACE,IAAIM,KAAK,GAAG,CAAC;IACTC,QAAQ,GAAG,CAAC;IACZC,MAAM,GAAGC,KAAK,CAAChB,UAAU,CAACY,MAAM,GAAGL,IAAI,CAAC,CAAC;EAE7C,OAAOM,KAAK,GAAGD,MAAM,EAAE;IACrBG,MAAM,CAACD,QAAQ,EAAE,CAAC,GAAGG,SAAS,CAACX,KAAK,EAAEO,KAAK,EAAGA,KAAK,IAAIN,IAAI,CAAE;EACjE;EACE,OAAOQ,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}