{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, TransitionGroup as _TransitionGroup, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"no-redirect\",\n  style: {\n    \"color\": \"rgba(255, 255, 255, 1)\"\n  }\n};\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_breadcrumb_item = _resolveComponent(\"el-breadcrumb-item\");\n  const _component_el_breadcrumb = _resolveComponent(\"el-breadcrumb\");\n  return _openBlock(), _createBlock(_component_el_breadcrumb, {\n    class: \"app-breadcrumb\",\n    separator: \"/\",\n    style: {\n      \"height\": \"40px\",\n      \"backgroundcolor\": \"var(--publicMainColor)\",\n      \"borderradius\": \"30px\",\n      \"padding\": \"0px 20px 0px 20px\",\n      \"boxshadow\": \"0px 0px 5px 0.5px var(--publicSubColor) inset\",\n      \"borderwidth\": \"2px\",\n      \"borderstyle\": \"solid\",\n      \"bordercolor\": \"rgba(255, 255, 255, 1)\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_TransitionGroup, {\n      name: \"breadcrumb\",\n      class: \"box\",\n      style: 1 == 1 ? 'justifyContent:flex-start;' : 1 == 2 ? 'justifyContent:center;' : 'justifyContent:flex-end;'\n    }, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.levelList, (item, index) => {\n        return _openBlock(), _createBlock(_component_el_breadcrumb_item, {\n          key: item.path\n        }, {\n          default: _withCtx(() => [item.redirect === 'noRedirect' || index == $data.levelList.length - 1 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString(item.name), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"a\", {\n            key: 1,\n            onClick: _withModifiers($event => $options.handleLink(item), [\"prevent\"])\n          }, _toDisplayString(item.name), 9 /* TEXT, PROPS */, _hoisted_2))]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","style","_createBlock","_component_el_breadcrumb","separator","_createVNode","_TransitionGroup","name","_createElementBlock","_Fragment","_renderList","$data","levelList","item","index","_component_el_breadcrumb_item","key","path","redirect","length","_hoisted_1","_toDisplayString","onClick","_withModifiers","$event","$options","handleLink","_hoisted_2"],"sources":["D:\\bise\\bise\\front\\src\\components\\common\\BreadCrumbs.vue"],"sourcesContent":["<template>\n  <el-breadcrumb\n    class=\"app-breadcrumb\"\n    separator=\"/\"\n    style=\"\n      height: 40px;\n      backgroundcolor: var(--publicMainColor);\n      borderradius: 30px;\n      padding: 0px 20px 0px 20px;\n      boxshadow: 0px 0px 5px 0.5px var(--publicSubColor) inset;\n      borderwidth: 2px;\n      borderstyle: solid;\n      bordercolor: rgba(255, 255, 255, 1);\n    \"\n  >\n    <transition-group\n      name=\"breadcrumb\"\n      class=\"box\"\n      :style=\"\n        1 == 1\n          ? 'justifyContent:flex-start;'\n          : 1 == 2\n          ? 'justifyContent:center;'\n          : 'justifyContent:flex-end;'\n      \"\n    >\n      <el-breadcrumb-item v-for=\"(item, index) in levelList\" :key=\"item.path\">\n        <span\n          v-if=\"item.redirect === 'noRedirect' || index == levelList.length - 1\"\n          class=\"no-redirect\"\n          style=\"color: rgba(255, 255, 255, 1)\"\n          >{{ item.name }}</span\n        >\n        <a v-else @click.prevent=\"handleLink(item)\">{{ item.name }}</a>\n      </el-breadcrumb-item>\n    </transition-group>\n  </el-breadcrumb>\n</template>\n\n<script>\nimport pathToRegexp from 'path-to-regexp'\nimport { generateTitle } from '@/utils/i18n'\nexport default {\n  data() {\n    return {\n      levelList: null,\n    }\n  },\n  watch: {\n    $route() {\n      this.getBreadcrumb()\n    },\n  },\n  created() {\n    this.getBreadcrumb()\n    this.breadcrumbStyleChange()\n  },\n  methods: {\n    generateTitle,\n    getBreadcrumb() {\n      // only show routes with meta.title\n      let route = this.$route\n      let matched = route.matched.filter((item) => item.meta)\n      const first = matched[0]\n      matched = [{ path: '/index' }].concat(matched)\n\n      this.levelList = matched.filter((item) => item.meta)\n    },\n    isDashboard(route) {\n      const name = route && route.name\n      if (!name) {\n        return false\n      }\n      return name.trim().toLocaleLowerCase() === 'Index'.toLocaleLowerCase()\n    },\n    pathCompile(path) {\n      // To solve this problem https://github.com/PanJiaChen/vue-element-admin/issues/561\n      const { params } = this.$route\n      var toPath = pathToRegexp.compile(path)\n      return toPath(params)\n    },\n    handleLink(item) {\n      const { redirect, path } = item\n      if (redirect) {\n        this.$router.push(redirect)\n        return\n      }\n      this.$router.push(path)\n    },\n    breadcrumbStyleChange(val) {\n      this.$nextTick(() => {\n        document\n          .querySelectorAll('.app-breadcrumb .el-breadcrumb__separator')\n          .forEach((el) => {\n            el.innerText = '/'\n            el.style.color = 'rgba(255, 255, 255, 1)'\n          })\n        document\n          .querySelectorAll('.app-breadcrumb .el-breadcrumb__inner a')\n          .forEach((el) => {\n            el.style.color = 'rgba(251, 251, 251, 1)'\n          })\n        document\n          .querySelectorAll(\n            '.app-breadcrumb .el-breadcrumb__inner .no-redirect'\n          )\n          .forEach((el) => {\n            el.style.color = 'rgba(255, 255, 255, 1)'\n          })\n\n        let str = '2'\n        if (2 == str) {\n          let headHeight = '60px'\n          headHeight = parseInt(headHeight) + 10 + 'px'\n          document.querySelectorAll('.app-breadcrumb').forEach((el) => {\n            el.style.marginTop = headHeight\n          })\n        }\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.app-breadcrumb {\n  display: block;\n  font-size: 14px;\n  line-height: 50px;\n\n  .box {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: flex-start;\n    align-items: center;\n  }\n\n  .no-redirect {\n    color: #97a8be;\n    cursor: text;\n  }\n}\n</style>\n"],"mappings":";;;EA6BUA,KAAK,EAAC,aAAa;EACnBC,KAAqC,EAArC;IAAA;EAAA;;;;;;uBA7BRC,YAAA,CAmCgBC,wBAAA;IAlCdH,KAAK,EAAC,gBAAgB;IACtBI,SAAS,EAAC,GAAG;IACbH,KASC,EATD;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;;sBAWA,MAoBmB,CApBnBI,YAAA,CAoBmBC,gBAAA;MAnBjBC,IAAI,EAAC,YAAY;MACjBP,KAAK,EAAC,KAAK;MACVC,KAAK,E;;wBAQc,MAAkC,E,kBAAtDO,mBAAA,CAQqBC,SAAA,QAAAC,WAAA,CARuBC,KAAA,CAAAC,SAAS,GAAzBC,IAAI,EAAEC,KAAK;6BAAvCZ,YAAA,CAQqBa,6BAAA;UARmCC,GAAG,EAAEH,IAAI,CAACI;;4BAI7C,MAIU,CANrBJ,IAAI,CAACK,QAAQ,qBAAqBJ,KAAK,IAAIH,KAAA,CAAAC,SAAS,CAACO,MAAM,Q,cADnEX,mBAAA,CAKC,QALDY,UAKC,EAAAC,gBAAA,CADKR,IAAI,CAACN,IAAI,qB,cAEfC,mBAAA,CAA+D;;YAApDc,OAAK,EAAAC,cAAA,CAAAC,MAAA,IAAUC,QAAA,CAAAC,UAAU,CAACb,IAAI;8BAAMA,IAAI,CAACN,IAAI,wBAAAoB,UAAA,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}