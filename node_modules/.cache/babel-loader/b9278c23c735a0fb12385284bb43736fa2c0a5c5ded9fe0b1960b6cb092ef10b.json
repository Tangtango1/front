{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { registerMixin, toLngLat, isMapInstance, isOverlayGroupInstance, isVectorLayerInstance } from '@vuemap/vue-amap-util';\nimport editorMixin from '../../../mixins/editor-component.mjs';\nvar script = defineComponent({\n  name: \"ElAmapRectangle\",\n  mixins: [registerMixin, editorMixin],\n  props: {\n    bounds: {\n      type: Array,\n      required: true\n    },\n    bubble: {\n      type: Boolean,\n      default: false\n    },\n    cursor: {\n      type: String\n    },\n    strokeColor: {\n      type: String\n    },\n    strokeOpacity: {\n      type: Number\n    },\n    strokeWeight: {\n      type: Number\n    },\n    fillColor: {\n      type: String\n    },\n    fillOpacity: {\n      type: Number\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    extData: {\n      type: Object,\n      default: () => null\n    },\n    strokeStyle: {\n      type: String,\n      validator(value) {\n        return [\"solid\", \"dashed\"].indexOf(value) !== -1;\n      }\n    },\n    strokeDasharray: {\n      type: Array\n    }\n  },\n  emits: [\"update:bounds\"],\n  data() {\n    return {\n      converters: {\n        bounds(path) {\n          return new AMap.Bounds(toLngLat(path[0]), toLngLat(path[1]));\n        }\n      }\n    };\n  },\n  methods: {\n    __initComponent(options) {\n      this.$amapComponent = new AMap.Rectangle(options);\n      if (isMapInstance(this.$parentComponent)) {\n        this.$parentComponent.add(this.$amapComponent);\n      } else if (isOverlayGroupInstance(this.$parentComponent)) {\n        this.$parentComponent.addOverlay(this.$amapComponent);\n      } else if (isVectorLayerInstance(this.$parentComponent)) {\n        this.$parentComponent.add(this.$amapComponent);\n      }\n      this.bindModelEvents();\n    },\n    bindModelEvents() {\n      this.$amapComponent.on(\"dragend\", () => {\n        this.emitModel(this.$amapComponent);\n      });\n      this.$amapComponent.on(\"touchend\", () => {\n        this.emitModel(this.$amapComponent);\n      });\n    },\n    createEditor() {\n      return new Promise(resolve => {\n        if (this.$amapComponent.editor) {\n          resolve();\n        } else {\n          AMap.plugin([\"AMap.RectangleEditor\"], () => {\n            this.$amapComponent.editor = new AMap.RectangleEditor(this.$parentComponent, this.$amapComponent, this.editOptions);\n            this.setEditorEvents();\n            this.bindEditorModelEvents();\n            resolve();\n          });\n        }\n      });\n    },\n    bindEditorModelEvents() {\n      this.$amapComponent.editor.on(\"addnode\", e => {\n        this.emitModel(e.target);\n      });\n      this.$amapComponent.editor.on(\"adjust\", e => {\n        this.emitModel(e.target);\n      });\n      this.$amapComponent.editor.on(\"move\", e => {\n        this.emitModel(e.target);\n      });\n      this.$amapComponent.editor.on(\"add\", e => {\n        this.emitModel(e.target);\n      });\n      this.$amapComponent.editor.on(\"end\", e => {\n        this.emitModel(e.target);\n      });\n    },\n    emitModel(target) {\n      const bounds = target.getBounds();\n      const southWest = bounds.getSouthWest();\n      const northEast = bounds.getNorthEast();\n      const paths = [southWest.toArray(), northEast.toArray()];\n      this.$emit(\"update:bounds\", paths);\n    },\n    destroyComponent() {\n      if (this.$amapComponent.editor) {\n        if (!this.parentInstance.isDestroy) {\n          this.$amapComponent.editor.close();\n        }\n        this.$amapComponent.editor = null;\n      }\n      if (!this.parentInstance.isDestroy) {\n        if (isMapInstance(this.$parentComponent)) {\n          this.$parentComponent.remove(this.$amapComponent);\n        } else if (isOverlayGroupInstance(this.$parentComponent)) {\n          this.$parentComponent.removeOverlay(this.$amapComponent);\n        } else if (isVectorLayerInstance(this.$parentComponent)) {\n          this.$parentComponent.remove(this.$amapComponent);\n        }\n      }\n      if (this.$amapComponent.destroy) {\n        this.$amapComponent.destroy();\n      }\n      this.$amapComponent = null;\n      this.$parentComponent = null;\n    },\n    __zIndex(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          zIndex: value\n        });\n      }\n    },\n    __strokeColor(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeColor: value\n        });\n      }\n    },\n    __strokeOpacity(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeOpacity: value\n        });\n      }\n    },\n    __strokeWeight(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeWeight: value\n        });\n      }\n    },\n    __fillColor(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          fillColor: value\n        });\n      }\n    },\n    __fillOpacity(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          fillOpacity: value\n        });\n      }\n    },\n    __strokeStyle(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeStyle: value\n        });\n      }\n    },\n    __strokeDasharray(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.setOptions({\n          strokeDasharray: value\n        });\n      }\n    },\n    __editable(flag) {\n      this.createEditor().then(() => {\n        flag === true ? this.$amapComponent.editor.open() : this.$amapComponent.editor.close();\n      });\n    }\n  },\n  render() {\n    return null;\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","mixins","registerMixin","editorMixin","props","bounds","type","Array","required","bubble","Boolean","default","cursor","String","strokeColor","strokeOpacity","Number","strokeWeight","fillColor","fillOpacity","draggable","extData","Object","strokeStyle","validator","value","indexOf","strokeDasharray","emits","data","converters","path","AMap","Bounds","toLngLat","methods","__initComponent","options","$amapComponent","Rectangle","isMapInstance","$parentComponent","add","isOverlayGroupInstance","addOverlay","isVectorLayerInstance","bindModelEvents","on","emitModel","createEditor","Promise","resolve","editor","plugin","RectangleEditor","editOptions","setEditorEvents","bindEditorModelEvents","e","target","getBounds","southWest","getSouthWest","northEast","getNorthEast","paths","toArray","$emit","destroyComponent","parentInstance","isDestroy","close","remove","removeOverlay","destroy","__zIndex","setOptions","zIndex","__strokeColor","__strokeOpacity","__strokeWeight","__fillColor","__fillOpacity","__strokeStyle","__strokeDasharray","__editable","flag","then","open","render"],"sources":["../../../../packages/vector/Rectangle/Rectangle.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport {defineComponent} from \"vue\";\r\nimport {registerMixin,isMapInstance, isOverlayGroupInstance, isVectorLayerInstance,toLngLat} from '@vuemap/vue-amap-util';\r\nimport editorMixin from '../../../mixins/editor-component';\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapRectangle',\r\n  mixins: [registerMixin, editorMixin],\r\n  props: {\r\n    bounds: {\r\n      type: Array,\r\n      required: true\r\n    }, // 矩形的范围\r\n    bubble: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 是否将覆盖物的鼠标或touch等事件冒泡到地图上\r\n    cursor: {\r\n      type: String\r\n    }, // 指定鼠标悬停时的鼠标样式，自定义cursor，IE仅支持cur/ani/ico格式，Opera不支持自定义cursor\r\n    strokeColor: {\r\n      type: String\r\n    }, // 线条颜色，使用16进制颜色代码赋值。默认值为#00D3FC\r\n    strokeOpacity: {\r\n      type: Number\r\n    }, // 轮廓线透明度，取值范围 [0,1] ，0表示完全透明，1表示不透明。默认为0.9\r\n    strokeWeight: {\r\n      type: Number\r\n    }, // 轮廓线宽度。默认 2\r\n    fillColor: {\r\n      type: String\r\n    }, // 多边形填充颜色，使用16进制颜色代码赋值，如：#00B2D5\r\n    fillOpacity: {\r\n      type: Number\r\n    }, // 多边形填充透明度，取值范围 [0,1] ，0表示完全透明，1表示不透明。默认为0.5\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    }, // 设置多边形是否可拖拽移动，默认为false\r\n    extData: {\r\n      type: Object,\r\n      default: () => null\r\n    },\r\n    strokeStyle: {\r\n      type: String,\r\n      validator(value : string) {\r\n        // 这个值必须匹配下列字符串中的一个\r\n        return ['solid', 'dashed'].indexOf(value) !== -1;\r\n      }\r\n    }, // 轮廓线样式，实线:solid，虚线:dashed\r\n    strokeDasharray: {\r\n      type: Array\r\n    }// 勾勒形状轮廓的虚线和间隙的样式，此属性在strokeStyle 为dashed 时有效， 此属性在ie9+浏览器有效 取值： 实线： [0,0,0] 虚线： [10,10] ， [10,10] 表示10个像素的实线和10个像素的空白（如此反复）组成的虚线 点画线： [10,2,10] ， [10,2,10] 表示10个像素的实线和2个像素的空白 + 10个像素的实线和10个像素的空白 （如此反复）组成的虚线\r\n  },\r\n  emits: ['update:bounds'],\r\n  data() {\r\n    return {\r\n      converters: {\r\n        bounds(path) {\r\n          return new AMap.Bounds(toLngLat(path[0]), toLngLat(path[1]));\r\n        }\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    __initComponent(options) {\r\n      this.$amapComponent = new AMap.Rectangle(options);\r\n      if (isMapInstance(this.$parentComponent)) {\r\n        this.$parentComponent.add(this.$amapComponent);\r\n      } else if (isOverlayGroupInstance(this.$parentComponent)) {\r\n        this.$parentComponent.addOverlay(this.$amapComponent);\r\n      } else if (isVectorLayerInstance(this.$parentComponent)) {\r\n        this.$parentComponent.add(this.$amapComponent);\r\n      }\r\n      this.bindModelEvents();\r\n    },\r\n    bindModelEvents(){\r\n      this.$amapComponent.on('dragend',() => {\r\n        this.emitModel(this.$amapComponent);\r\n      });\r\n      this.$amapComponent.on('touchend',() => {\r\n        this.emitModel(this.$amapComponent);\r\n      });\r\n    },\r\n    createEditor() {\r\n      return new Promise<void>((resolve) => {\r\n        if (this.$amapComponent.editor) {\r\n          resolve();\r\n        } else {\r\n          AMap.plugin(['AMap.RectangleEditor'], () => {\r\n            this.$amapComponent.editor = new AMap.RectangleEditor(this.$parentComponent, this.$amapComponent, this.editOptions);\r\n            this.setEditorEvents();\r\n            this.bindEditorModelEvents();\r\n            resolve();\r\n          });\r\n        }\r\n      });\r\n    },\r\n    bindEditorModelEvents(){\r\n      this.$amapComponent.editor.on('addnode',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n      this.$amapComponent.editor.on('adjust',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n      this.$amapComponent.editor.on('move',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n      this.$amapComponent.editor.on('add',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n      this.$amapComponent.editor.on('end',(e) => {\r\n        this.emitModel(e.target);\r\n      });\r\n    },\r\n    emitModel(target){\r\n      const bounds = target.getBounds();\r\n      const southWest = bounds.getSouthWest();\r\n      const northEast = bounds.getNorthEast();\r\n      const paths = [southWest.toArray(), northEast.toArray()]\r\n      this.$emit('update:bounds', paths);\r\n    },\r\n    destroyComponent() {\r\n      if (this.$amapComponent.editor) {\r\n        if(!this.parentInstance.isDestroy){\r\n          this.$amapComponent.editor.close();\r\n        }\r\n        this.$amapComponent.editor = null;\r\n      }\r\n      if(!this.parentInstance.isDestroy){\r\n        if (isMapInstance(this.$parentComponent)) {\r\n          this.$parentComponent.remove(this.$amapComponent);\r\n        } else if (isOverlayGroupInstance(this.$parentComponent)) {\r\n          this.$parentComponent.removeOverlay(this.$amapComponent);\r\n        } else if (isVectorLayerInstance(this.$parentComponent)) {\r\n          this.$parentComponent.remove(this.$amapComponent);\r\n        }\r\n      }\r\n      if(this.$amapComponent.destroy){\r\n        this.$amapComponent.destroy();\r\n      }\r\n      this.$amapComponent = null;\r\n      this.$parentComponent = null;\r\n    },\r\n    __zIndex(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({zIndex: value});\r\n      }\r\n    },\r\n    __strokeColor(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeColor: value});\r\n      }\r\n    },\r\n    __strokeOpacity(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeOpacity: value});\r\n      }\r\n    },\r\n    __strokeWeight(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeWeight: value});\r\n      }\r\n    },\r\n    __fillColor(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({fillColor: value});\r\n      }\r\n    },\r\n    __fillOpacity(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({fillOpacity: value});\r\n      }\r\n    },\r\n    __strokeStyle(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeStyle: value});\r\n      }\r\n    },\r\n    __strokeDasharray(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.setOptions({strokeDasharray: value});\r\n      }\r\n    },\r\n    __editable(flag) {\r\n      this.createEditor().then(() => {\r\n        flag === true ? this.$amapComponent.editor.open() : this.$amapComponent.editor.close();\r\n      });\r\n    },\r\n  },\r\n  render(){\r\n    return null;\r\n  }\r\n});\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}