{"ast":null,"code":"import getAllKeys from './_getAllKeys.mjs';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n    objProps = getAllKeys(object),\n    objLength = objProps.length,\n    othProps = getAllKeys(other),\n    othLength = othProps.length;\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n      othValue = other[key];\n    if (customizer) {\n      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n      othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\nexport { equalObjects as default };","map":{"version":3,"names":["COMPARE_PARTIAL_FLAG","objectProto","Object","prototype","hasOwnProperty","equalObjects","object","other","bitmask","customizer","equalFunc","stack","isPartial","objProps","getAllKeys","objLength","length","othProps","othLength","index","key","call","objStacked","get","othStacked","result","set","skipCtor","objValue","othValue","compared","undefined","objCtor","constructor","othCtor"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_equalObjects.js"],"sourcesContent":["import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}