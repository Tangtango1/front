{"ast":null,"code":"import Symbol from './_Symbol.mjs';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n    tag = value[symToStringTag];\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\nexport { getRawTag as default };","map":{"version":3,"names":["objectProto","Object","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","Symbol","toStringTag","undefined","getRawTag","value","isOwn","call","tag","unmasked","e","result"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getRawTag.js"],"sourcesContent":["import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n"],"mappings":";;AAEA;AACA,IAAIA,WAAW,GAAGC,MAAM,CAACC,SAAS;;AAElC;AACA,IAAIC,cAAc,GAAGH,WAAW,CAACG,cAAc;;AAE/C;AACA;AACA;AACA;AACA;AACA,IAAIC,oBAAoB,GAAGJ,WAAW,CAACK,QAAQ;;AAE/C;AACA,IAAIC,cAAc,GAAGC,MAAM,GAAGA,MAAM,CAACC,WAAW,GAAGC,SAAS;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,KAAK,EAAE;EACxB,IAAIC,KAAK,GAAGT,cAAc,CAACU,IAAI,CAACF,KAAK,EAAEL,cAAc,CAAC;IAClDQ,GAAG,GAAGH,KAAK,CAACL,cAAc,CAAC;EAE/B,IAAI;IACFK,KAAK,CAACL,cAAc,CAAC,GAAGG,SAAS;IACjC,IAAIM,QAAQ,GAAG,IAAI;EACvB,CAAG,CAAC,OAAOC,CAAC,EAAE;EAEZ,IAAIC,MAAM,GAAGb,oBAAoB,CAACS,IAAI,CAACF,KAAK,CAAC;EAC7C,IAAII,QAAQ,EAAE;IACZ,IAAIH,KAAK,EAAE;MACTD,KAAK,CAACL,cAAc,CAAC,GAAGQ,GAAG;IACjC,CAAK,MAAM;MACL,OAAOH,KAAK,CAACL,cAAc,CAAC;IAClC;EACA;EACE,OAAOW,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}