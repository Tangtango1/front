{"ast":null,"code":"export default {\n  data() {\n    return {\n      dialogVisible: false,\n      ruleForm: {},\n      user: {},\n      rules: {\n        password: [{\n          required: true,\n          message: '密码不能为空',\n          trigger: 'blur'\n        }],\n        newpassword: [{\n          required: true,\n          message: '新密码不能为空',\n          trigger: 'blur'\n        }],\n        repassword: [{\n          required: true,\n          message: '确认密码不能为空',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted() {\n    this.$http({\n      url: `${this.$storage.get('sessionTable')}/session`,\n      method: 'get'\n    }).then(({\n      data\n    }) => {\n      if (data && data.code === 0) {\n        this.user = data.data;\n      } else {\n        this.$message.error(data.msg);\n      }\n    });\n  },\n  methods: {\n    onLogout() {\n      this.$storage.remove('Token');\n      this.$router.replace({\n        name: 'login'\n      });\n    },\n    // 修改密码\n    onUpdateHandler() {\n      this.$refs['ruleForm'].validate(valid => {\n        if (valid) {\n          var password = '';\n          if (this.user.mima) {\n            password = this.user.mima;\n          } else if (this.user.password) {\n            password = this.user.password;\n          }\n          if (this.ruleForm.password != password) {\n            this.$message.error('原密码错误');\n            return;\n          }\n          if (this.ruleForm.newpassword != this.ruleForm.repassword) {\n            this.$message.error('两次密码输入不一致');\n            return;\n          }\n          this.user.password = this.ruleForm.newpassword;\n          this.user.mima = this.ruleForm.newpassword;\n          this.$http({\n            url: `${this.$storage.get('sessionTable')}/update`,\n            method: 'post',\n            data: this.user\n          }).then(({\n            data\n          }) => {\n            if (data && data.code === 0) {\n              this.$message({\n                message: '修改密码成功,下次登录系统生效',\n                type: 'success',\n                duration: 1500,\n                onClose: () => {}\n              });\n            } else {\n              this.$message.error(data.msg);\n            }\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","dialogVisible","ruleForm","user","rules","password","required","message","trigger","newpassword","repassword","mounted","$http","url","$storage","get","method","then","code","$message","error","msg","methods","onLogout","remove","$router","replace","name","onUpdateHandler","$refs","validate","valid","mima","type","duration","onClose"],"sources":["D:\\bise\\bise\\front\\src\\views\\update-password.vue"],"sourcesContent":["<template>\n  <div>\n    <el-form\n      class=\"detail-form-content\"\n      ref=\"ruleForm\"\n      :rules=\"rules\"\n      :model=\"ruleForm\"\n      label-width=\"80px\"\n    >\n      <el-form-item label=\"原密码\" prop=\"password\">\n        <el-input v-model=\"ruleForm.password\" show-password></el-input>\n      </el-form-item>\n      <el-form-item label=\"新密码\" prop=\"newpassword\">\n        <el-input\n          type=\"password\"\n          v-model=\"ruleForm.newpassword\"\n          show-password\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"确认密码\" prop=\"repassword\">\n        <el-input\n          type=\"password\"\n          v-model=\"ruleForm.repassword\"\n          show-password\n        ></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"onUpdateHandler\">确 定</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      dialogVisible: false,\n      ruleForm: {},\n      user: {},\n      rules: {\n        password: [\n          {\n            required: true,\n            message: '密码不能为空',\n            trigger: 'blur',\n          },\n        ],\n        newpassword: [\n          {\n            required: true,\n            message: '新密码不能为空',\n            trigger: 'blur',\n          },\n        ],\n        repassword: [\n          {\n            required: true,\n            message: '确认密码不能为空',\n            trigger: 'blur',\n          },\n        ],\n      },\n    }\n  },\n  mounted() {\n    this.$http({\n      url: `${this.$storage.get('sessionTable')}/session`,\n      method: 'get',\n    }).then(({ data }) => {\n      if (data && data.code === 0) {\n        this.user = data.data\n      } else {\n        this.$message.error(data.msg)\n      }\n    })\n  },\n  methods: {\n    onLogout() {\n      this.$storage.remove('Token')\n      this.$router.replace({ name: 'login' })\n    },\n    // 修改密码\n    onUpdateHandler() {\n      this.$refs['ruleForm'].validate((valid) => {\n        if (valid) {\n          var password = ''\n          if (this.user.mima) {\n            password = this.user.mima\n          } else if (this.user.password) {\n            password = this.user.password\n          }\n          if (this.ruleForm.password != password) {\n            this.$message.error('原密码错误')\n            return\n          }\n          if (this.ruleForm.newpassword != this.ruleForm.repassword) {\n            this.$message.error('两次密码输入不一致')\n            return\n          }\n          this.user.password = this.ruleForm.newpassword\n          this.user.mima = this.ruleForm.newpassword\n          this.$http({\n            url: `${this.$storage.get('sessionTable')}/update`,\n            method: 'post',\n            data: this.user,\n          }).then(({ data }) => {\n            if (data && data.code === 0) {\n              this.$message({\n                message: '修改密码成功,下次登录系统生效',\n                type: 'success',\n                duration: 1500,\n                onClose: () => {},\n              })\n            } else {\n              this.$message.error(data.msg)\n            }\n          })\n        }\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}