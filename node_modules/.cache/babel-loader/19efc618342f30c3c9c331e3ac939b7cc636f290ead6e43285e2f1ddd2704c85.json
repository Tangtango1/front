{"ast":null,"code":"// 打印类属性、方法定义\n/* eslint-disable */\nclass Print {\n  constructor(dom, options) {\n    this.options = {\n      noPrint: '.no-print',\n      ...options\n    };\n    if (typeof dom === 'string') {\n      this.dom = document.querySelector(dom);\n    } else {\n      this.dom = this.isDOM(dom) ? dom : dom.$el;\n    }\n    if (!this.dom) {\n      throw new Error('打印元素未找到');\n    }\n    this.init();\n  }\n  init() {\n    const content = this.getStyle() + this.getHtml();\n    this.writeIframe(content);\n  }\n  getStyle() {\n    let str = '';\n    const styles = document.querySelectorAll('style, link');\n    styles.forEach(style => {\n      str += style.outerHTML;\n    });\n    str += `<style>\n      ${this.options.noPrint || '.no-print'} { display: none !important; }\n      @page { size: auto; margin: 0; }\n    </style>`;\n    return str;\n  }\n  getHtml() {\n    // 处理表单元素状态\n    this.preserveFormData();\n\n    // 包裹打印元素并返回HTML\n    return this.wrapperRefDom(this.dom).outerHTML;\n  }\n  preserveFormData() {\n    // 处理input元素\n    document.querySelectorAll('input').forEach(input => {\n      if (input.type === 'checkbox' || input.type === 'radio') {\n        input.checked ? input.setAttribute('checked', 'checked') : input.removeAttribute('checked');\n      } else {\n        input.setAttribute('value', input.value);\n      }\n    });\n\n    // 处理textarea元素\n    document.querySelectorAll('textarea').forEach(textarea => {\n      textarea.innerHTML = textarea.value;\n    });\n\n    // 处理select元素\n    document.querySelectorAll('select').forEach(select => {\n      Array.from(select.children).forEach(option => {\n        option.selected ? option.setAttribute('selected', 'selected') : option.removeAttribute('selected');\n      });\n    });\n  }\n  wrapperRefDom(refDom) {\n    let wrappedDom = refDom.cloneNode(true);\n    let currentDom = refDom.parentElement;\n    while (currentDom && currentDom !== document.body) {\n      const parentClone = currentDom.cloneNode(false);\n      parentClone.appendChild(wrappedDom);\n      wrappedDom = parentClone;\n      currentDom = currentDom.parentElement;\n    }\n    return wrappedDom;\n  }\n  writeIframe(content) {\n    const iframe = document.createElement('iframe');\n    iframe.id = 'print-iframe';\n    iframe.style.cssText = `\n      position: absolute;\n      width: 0;\n      height: 0;\n      top: -10px;\n      left: -10px;\n      visibility: hidden;\n    `;\n    document.body.appendChild(iframe);\n    const iframeWindow = iframe.contentWindow || iframe.contentDocument?.defaultView;\n    const iframeDoc = iframe.contentDocument || iframe.contentWindow?.document;\n    if (!iframeDoc) {\n      throw new Error('无法创建打印iframe');\n    }\n    iframeDoc.open();\n    iframeDoc.write(content);\n    iframeDoc.close();\n    iframe.onload = () => {\n      this.toPrint(iframeWindow);\n      setTimeout(() => {\n        document.body.removeChild(iframe);\n      }, 1000);\n    };\n  }\n  toPrint(frameWindow) {\n    try {\n      setTimeout(() => {\n        frameWindow?.focus();\n        try {\n          if (!frameWindow?.document.execCommand('print', false, null)) {\n            frameWindow?.print();\n          }\n        } catch (e) {\n          frameWindow?.print();\n        }\n        frameWindow?.close();\n      }, 10);\n    } catch (err) {\n      console.error('打印出错:', err);\n    }\n  }\n  isDOM(obj) {\n    return obj instanceof HTMLElement;\n  }\n}\nexport default {\n  install(app) {\n    app.config.globalProperties.$print = (dom, options) => {\n      return new Print(dom, options);\n    };\n\n    // 提供组合式API支持\n    app.provide('$print', Print);\n  }\n};","map":{"version":3,"names":["Print","constructor","dom","options","noPrint","document","querySelector","isDOM","$el","Error","init","content","getStyle","getHtml","writeIframe","str","styles","querySelectorAll","forEach","style","outerHTML","preserveFormData","wrapperRefDom","input","type","checked","setAttribute","removeAttribute","value","textarea","innerHTML","select","Array","from","children","option","selected","refDom","wrappedDom","cloneNode","currentDom","parentElement","body","parentClone","appendChild","iframe","createElement","id","cssText","iframeWindow","contentWindow","contentDocument","defaultView","iframeDoc","open","write","close","onload","toPrint","setTimeout","removeChild","frameWindow","focus","execCommand","print","e","err","console","error","obj","HTMLElement","install","app","config","globalProperties","$print","provide"],"sources":["D:/bise/bise/front/src/utils/print.js"],"sourcesContent":["// 打印类属性、方法定义\n/* eslint-disable */\nclass Print {\n  constructor(dom, options) {\n    this.options = {\n      noPrint: '.no-print',\n      ...options\n    };\n\n    if (typeof dom === 'string') {\n      this.dom = document.querySelector(dom);\n    } else {\n      this.dom = this.isDOM(dom) ? dom : dom.$el;\n    }\n\n    if (!this.dom) {\n      throw new Error('打印元素未找到');\n    }\n\n    this.init();\n  }\n\n  init() {\n    const content = this.getStyle() + this.getHtml();\n    this.writeIframe(content);\n  }\n\n  getStyle() {\n    let str = '';\n    const styles = document.querySelectorAll('style, link');\n    \n    styles.forEach(style => {\n      str += style.outerHTML;\n    });\n\n    str += `<style>\n      ${this.options.noPrint || '.no-print'} { display: none !important; }\n      @page { size: auto; margin: 0; }\n    </style>`;\n\n    return str;\n  }\n\n  getHtml() {\n    // 处理表单元素状态\n    this.preserveFormData();\n    \n    // 包裹打印元素并返回HTML\n    return this.wrapperRefDom(this.dom).outerHTML;\n  }\n\n  preserveFormData() {\n    // 处理input元素\n    document.querySelectorAll('input').forEach(input => {\n      if (input.type === 'checkbox' || input.type === 'radio') {\n        input.checked ? input.setAttribute('checked', 'checked') \n                     : input.removeAttribute('checked');\n      } else {\n        input.setAttribute('value', input.value);\n      }\n    });\n\n    // 处理textarea元素\n    document.querySelectorAll('textarea').forEach(textarea => {\n      textarea.innerHTML = textarea.value;\n    });\n\n    // 处理select元素\n    document.querySelectorAll('select').forEach(select => {\n      Array.from(select.children).forEach(option => {\n        option.selected ? option.setAttribute('selected', 'selected')\n                       : option.removeAttribute('selected');\n      });\n    });\n  }\n\n  wrapperRefDom(refDom) {\n    let wrappedDom = refDom.cloneNode(true);\n    let currentDom = refDom.parentElement;\n\n    while (currentDom && currentDom !== document.body) {\n      const parentClone = currentDom.cloneNode(false);\n      parentClone.appendChild(wrappedDom);\n      wrappedDom = parentClone;\n      currentDom = currentDom.parentElement;\n    }\n\n    return wrappedDom;\n  }\n\n  writeIframe(content) {\n    const iframe = document.createElement('iframe');\n    iframe.id = 'print-iframe';\n    iframe.style.cssText = `\n      position: absolute;\n      width: 0;\n      height: 0;\n      top: -10px;\n      left: -10px;\n      visibility: hidden;\n    `;\n\n    document.body.appendChild(iframe);\n\n    const iframeWindow = iframe.contentWindow || iframe.contentDocument?.defaultView;\n    const iframeDoc = iframe.contentDocument || iframe.contentWindow?.document;\n\n    if (!iframeDoc) {\n      throw new Error('无法创建打印iframe');\n    }\n\n    iframeDoc.open();\n    iframeDoc.write(content);\n    iframeDoc.close();\n\n    iframe.onload = () => {\n      this.toPrint(iframeWindow);\n      setTimeout(() => {\n        document.body.removeChild(iframe);\n      }, 1000);\n    };\n  }\n\n  toPrint(frameWindow) {\n    try {\n      setTimeout(() => {\n        frameWindow?.focus();\n        try {\n          if (!frameWindow?.document.execCommand('print', false, null)) {\n            frameWindow?.print();\n          }\n        } catch (e) {\n          frameWindow?.print();\n        }\n        frameWindow?.close();\n      }, 10);\n    } catch (err) {\n      console.error('打印出错:', err);\n    }\n  }\n\n  isDOM(obj) {\n    return obj instanceof HTMLElement;\n  }\n}\n\nexport default {\n  install(app) {\n    app.config.globalProperties.$print = (dom, options) => {\n      return new Print(dom, options);\n    };\n    \n    // 提供组合式API支持\n    app.provide('$print', Print);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}