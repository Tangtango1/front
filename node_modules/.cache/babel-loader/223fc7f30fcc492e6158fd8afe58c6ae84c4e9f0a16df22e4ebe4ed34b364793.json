{"ast":null,"code":"import Symbol from './_Symbol.mjs';\nimport Uint8Array from './_Uint8Array.mjs';\nimport eq from './eq.mjs';\nimport equalArrays from './_equalArrays.mjs';\nimport mapToArray from './_mapToArray.mjs';\nimport setToArray from './_setToArray.mjs';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n  COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n  dateTag = '[object Date]',\n  errorTag = '[object Error]',\n  mapTag = '[object Map]',\n  numberTag = '[object Number]',\n  regexpTag = '[object RegExp]',\n  setTag = '[object Set]',\n  stringTag = '[object String]',\n  symbolTag = '[object Symbol]';\nvar arrayBufferTag = '[object ArrayBuffer]',\n  dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n    case arrayBufferTag:\n      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == other + '';\n    case mapTag:\n      var convert = mapToArray;\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\nexport { equalByTag as default };","map":{"version":3,"names":["COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","Symbol","prototype","undefined","symbolValueOf","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","byteLength","byteOffset","buffer","Uint8Array","eq","name","message","convert","mapToArray","isPartial","setToArray","size","stacked","get","set","result","equalArrays","call"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_equalByTag.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}