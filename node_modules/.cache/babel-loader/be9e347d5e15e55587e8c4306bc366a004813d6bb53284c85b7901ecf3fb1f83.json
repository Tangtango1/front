{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { eventReg, convertEventToLowerCase, eventHelper } from '@vuemap/vue-amap-util';\nvar editorMixin = defineComponent({\n  props: {\n    editable: {\n      type: Boolean,\n      default: void 0\n    },\n    editOptions: {\n      type: Object\n    }\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    setEditorEvents() {\n      if (!this.$amapComponent.editor) return;\n      const filters = [\"addnode\", \"adjust\", \"removenode\", \"end\", \"move\", \"add\"];\n      const filterSet = {};\n      Object.keys(this.$attrs).forEach(key => {\n        if (eventReg.test(key)) {\n          const eventKey = convertEventToLowerCase(key);\n          if (filters.indexOf(eventKey) !== -1) filterSet[eventKey] = this.$attrs[key];\n        }\n      });\n      Object.keys(filterSet).forEach(key => {\n        eventHelper.addListener(this.$amapComponent.editor, key, filterSet[key]);\n      });\n    }\n  }\n});\nexport { editorMixin as default };","map":{"version":3,"names":["editorMixin","defineComponent","props","editable","type","Boolean","default","editOptions","Object","data","methods","setEditorEvents","$amapComponent","editor","filters","filterSet","keys","$attrs","forEach","key","eventReg","test","eventKey","convertEventToLowerCase","indexOf","eventHelper","addListener"],"sources":["../../mixins/editor-component.ts"],"sourcesContent":["import {defineComponent} from \"vue\";\r\nimport {convertEventToLowerCase, eventReg, eventHelper} from \"@vuemap/vue-amap-util\";\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    editable: {\r\n      type: Boolean,\r\n      default: undefined\r\n    },\r\n    editOptions: {\r\n      type: Object\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n    };\r\n  },\r\n  methods: {\r\n    setEditorEvents() {\r\n      if (!this.$amapComponent.editor) return;\r\n      const filters = ['addnode', 'adjust', 'removenode', 'end', 'move', 'add'];\r\n      const filterSet = {};\r\n      Object.keys(this.$attrs).forEach(key => {\r\n        if(eventReg.test(key)){\r\n          const eventKey = convertEventToLowerCase(key);\r\n          if (filters.indexOf(eventKey) !== -1) filterSet[eventKey] = this.$attrs[key];\r\n        }\r\n\r\n      });\r\n      Object.keys(filterSet).forEach(key => {\r\n        eventHelper.addListener(this.$amapComponent.editor, key, filterSet[key]);\r\n      });\r\n    }\r\n  }\r\n});\r\n"],"mappings":";;AAGA,IAAAA,WAAA,GAAeC,eAAgB;EAC7BC,KAAO;IACLC,QAAU;MACRC,IAAM,EAAAC,OAAA;MACNC,OAAS;IAAA;IAEXC,WAAa;MACXH,IAAM,EAAAI;IAAA;EAAA;EAGVC,IAAOA,CAAA;IACE;EAAA;EAGTC,OAAS;IACPC,eAAkBA,CAAA;MACZ,KAAC,KAAKC,cAAe,CAAAC,MAAA,EAAQ;MACjC,MAAMC,OAAA,GAAU,CAAC,WAAW,QAAU,gBAAc,OAAO,MAAQ;MACnE,MAAMC,SAAY;MAClBP,MAAA,CAAOQ,IAAK,MAAKC,MAAQ,EAAAC,OAAA,CAAeC,GAAA;QACnC,IAAAC,QAAA,CAASC,IAAA,CAAKF,GAAK;UACpB,MAAMG,QAAA,GAAWC,uBAAwB,CAAAJ,GAAA;UACrC,IAAAL,OAAA,CAAQU,OAAA,CAAQF,QAAc,UAAcP,SAAA,CAAAO,QAAA,IAAY,KAAKL,MAAO,CAAAE,GAAA;QAAA;MAAA;MAIrEX,MAAA,CAAAQ,IAAA,CAAKD,SAAW,EAAAG,OAAA,CAAeC,GAAA;QACpCM,WAAA,CAAYC,WAAY,MAAKd,cAAe,CAAAC,MAAA,EAAQM,GAAA,EAAKJ,SAAU,CAAAI,GAAA;MAAA;IAAA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}