{"ast":null,"code":"import baseToString from './_baseToString.mjs';\nimport castSlice from './_castSlice.mjs';\nimport hasUnicode from './_hasUnicode.mjs';\nimport isIterateeCall from './_isIterateeCall.mjs';\nimport isRegExp from './isRegExp.mjs';\nimport stringToArray from './_stringToArray.mjs';\nimport toString from './toString.mjs';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\nexport { split as default };","map":{"version":3,"names":["MAX_ARRAY_LENGTH","split","string","separator","limit","isIterateeCall","undefined","toString","isRegExp","baseToString","hasUnicode","castSlice","stringToArray"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/split.js"],"sourcesContent":["import baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport isRegExp from './isRegExp.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nexport default split;\n"],"mappings":";;;;;;;;AAQA;AACA,IAAIA,gBAAgB,GAAG,UAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAE;EACvC,IAAIA,KAAK,IAAI,OAAOA,KAAK,IAAI,QAAQ,IAAIC,cAAc,CAACH,MAAM,EAAEC,SAAS,EAAEC,KAAK,CAAC,EAAE;IACjFD,SAAS,GAAGC,KAAK,GAAGE,SAAS;EACjC;EACEF,KAAK,GAAGA,KAAK,KAAKE,SAAS,GAAGN,gBAAgB,GAAGI,KAAK,KAAK,CAAC;EAC5D,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,EAAE;EACb;EACEF,MAAM,GAAGK,QAAQ,CAACL,MAAM,CAAC;EACzB,IAAIA,MAAM,KACJ,OAAOC,SAAS,IAAI,QAAQ,IAC3BA,SAAS,IAAI,IAAI,IAAI,CAACK,QAAQ,CAACL,SAAS,CAAE,CAC5C,EAAE;IACLA,SAAS,GAAGM,YAAY,CAACN,SAAS,CAAC;IACnC,IAAI,CAACA,SAAS,IAAIO,UAAU,CAACR,MAAM,CAAC,EAAE;MACpC,OAAOS,SAAS,CAACC,aAAa,CAACV,MAAM,CAAC,EAAE,CAAC,EAAEE,KAAK,CAAC;IACvD;EACA;EACE,OAAOF,MAAM,CAACD,KAAK,CAACE,SAAS,EAAEC,KAAK,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}