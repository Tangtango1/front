{"ast":null,"code":"import Symbol from './_Symbol.mjs';\nimport isArguments from './isArguments.mjs';\nimport isArray from './isArray.mjs';\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\nexport { isFlattenable as default };","map":{"version":3,"names":["spreadableSymbol","Symbol","isConcatSpreadable","undefined","isFlattenable","value","isArray","isArguments"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isFlattenable.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nexport default isFlattenable;\n"],"mappings":";;;;AAIA;AACA,IAAIA,gBAAgB,GAAGC,MAAM,GAAGA,MAAM,CAACC,kBAAkB,GAAGC,SAAS;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC5B,OAAOC,OAAO,CAACD,KAAK,CAAC,IAAIE,WAAW,CAACF,KAAK,CAAC,IACzC,CAAC,EAAEL,gBAAgB,IAAIK,KAAK,IAAIA,KAAK,CAACL,gBAAgB,CAAC,CAAC;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}