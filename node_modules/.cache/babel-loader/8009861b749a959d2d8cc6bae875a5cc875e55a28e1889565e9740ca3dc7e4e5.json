{"ast":null,"code":"// src/utils/http.js\nimport axios from 'axios';\nimport router from '../router';\nimport storage from '@/utils/storage';\nconst http = axios.create({\n  baseURL: '/xiaoyuanshitangdingcan',\n  timeout: 1000 * 86400,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\n\n// 请求拦截器\nhttp.interceptors.request.use(config => {\n  const token = storage.get('Token');\n  if (token) {\n    config.headers['Token'] = token; // 与后端保持完全一致\n  }\n  return config;\n}, error => {\n  return Promise.reject({\n    code: -1,\n    msg: '请求配置错误',\n    data: null\n  });\n});\n\n// 响应拦截器\nhttp.interceptors.response.use(response => {\n  try {\n    const data = response.data || {};\n\n    // 处理业务级错误（如401）\n    if (data.code === 401) {\n      handleUnauthorized();\n      return Promise.reject(formatError(data));\n    }\n\n    // 标准化成功响应\n    return {\n      code: 200,\n      msg: data.msg || '操作成功',\n      data: data.data ?? data // 使用空值合并运算符\n    };\n  } catch (e) {\n    return Promise.reject(formatError(e));\n  }\n}, error => {\n  // 处理HTTP错误（非2xx状态码）\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n\n    // 特殊处理401\n    if (status === 401) {\n      handleUnauthorized();\n    }\n    return Promise.reject(formatError({\n      code: status,\n      msg: data?.msg || `HTTP错误: ${status}`,\n      data: null\n    }));\n  }\n\n  // 处理无响应的网络错误\n  return Promise.reject(formatError({\n    code: -1,\n    msg: error.message || '网络连接异常',\n    data: null\n  }));\n});\n\n// 统一错误格式化\nconst formatError = error => ({\n  code: error.code || 500,\n  msg: error.msg || error.message || '未知错误',\n  data: error.data ?? null,\n  _original: error // 保留原始错误对象\n});\n\n// 处理未授权\nconst handleUnauthorized = () => {\n  storage.remove('Token');\n  router.push({\n    name: 'login',\n    query: {\n      redirect: router.currentRoute.fullPath,\n      reason: 'SESSION_EXPIRED' // 明确传递原因\n    }\n  });\n};\nexport default http;","map":{"version":3,"names":["axios","router","storage","http","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","get","error","Promise","reject","code","msg","data","response","handleUnauthorized","formatError","e","status","message","_original","remove","push","name","query","redirect","currentRoute","fullPath","reason"],"sources":["D:/bise/bise/front/src/utils/http.js"],"sourcesContent":["// src/utils/http.js\nimport axios from 'axios';\nimport router from '../router';\nimport storage from '@/utils/storage';\n\nconst http = axios.create({\n  baseURL: '/xiaoyuanshitangdingcan',\n  timeout: 1000 * 86400,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\n\n// 请求拦截器\nhttp.interceptors.request.use(\n  config => {\n    const token = storage.get('Token');\n    if (token) {\n      config.headers['Token'] = token; // 与后端保持完全一致\n    }\n    return config;\n  },\n  error => {\n    return Promise.reject({\n      code: -1,\n      msg: '请求配置错误',\n      data: null\n    });\n  }\n);\n\n// 响应拦截器\nhttp.interceptors.response.use(\n  response => {\n    try {\n      const data = response.data || {};\n      \n      // 处理业务级错误（如401）\n      if (data.code === 401) {\n        handleUnauthorized();\n        return Promise.reject(formatError(data));\n      }\n\n      // 标准化成功响应\n      return {\n        code: 200,\n        msg: data.msg || '操作成功',\n        data: data.data ?? data  // 使用空值合并运算符\n      };\n    } catch (e) {\n      return Promise.reject(formatError(e));\n    }\n  },\n  error => {\n    // 处理HTTP错误（非2xx状态码）\n    if (error.response) {\n      const { status, data } = error.response;\n      \n      // 特殊处理401\n      if (status === 401) {\n        handleUnauthorized();\n      }\n\n      return Promise.reject(\n        formatError({\n          code: status,\n          msg: data?.msg || `HTTP错误: ${status}`,\n          data: null\n        })\n      );\n    }\n    \n    // 处理无响应的网络错误\n    return Promise.reject(\n      formatError({\n        code: -1,\n        msg: error.message || '网络连接异常',\n        data: null\n      })\n    );\n  }\n);\n\n// 统一错误格式化\nconst formatError = (error) => ({\n  code: error.code || 500,\n  msg: error.msg || error.message || '未知错误',\n  data: error.data ?? null,\n  _original: error  // 保留原始错误对象\n});\n\n// 处理未授权\nconst handleUnauthorized = () => {\n  storage.remove('Token');\n  router.push({\n    name: 'login',\n    query: { \n      redirect: router.currentRoute.fullPath,\n      reason: 'SESSION_EXPIRED'  // 明确传递原因\n    }\n  });\n};\n\nexport default http;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}