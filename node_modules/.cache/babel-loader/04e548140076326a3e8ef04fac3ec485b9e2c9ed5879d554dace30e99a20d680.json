{"ast":null,"code":"import arrayMap from './_arrayMap.mjs';\nimport baseIntersection from './_baseIntersection.mjs';\nimport baseRest from './_baseRest.mjs';\nimport castArrayLikeObject from './_castArrayLikeObject.mjs';\nimport last from './last.mjs';\n\n/**\n * This method is like `_.intersection` except that it accepts `comparator`\n * which is invoked to compare elements of `arrays`. The order and references\n * of result values are determined by the first array. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.intersectionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }]\n */\nvar intersectionWith = baseRest(function (arrays) {\n  var comparator = last(arrays),\n    mapped = arrayMap(arrays, castArrayLikeObject);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  if (comparator) {\n    mapped.pop();\n  }\n  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];\n});\nexport { intersectionWith as default };","map":{"version":3,"names":["intersectionWith","baseRest","arrays","comparator","last","mapped","arrayMap","castArrayLikeObject","undefined","pop","length","baseIntersection"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/intersectionWith.js"],"sourcesContent":["import arrayMap from './_arrayMap.js';\nimport baseIntersection from './_baseIntersection.js';\nimport baseRest from './_baseRest.js';\nimport castArrayLikeObject from './_castArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.intersection` except that it accepts `comparator`\n * which is invoked to compare elements of `arrays`. The order and references\n * of result values are determined by the first array. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.intersectionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }]\n */\nvar intersectionWith = baseRest(function(arrays) {\n  var comparator = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  if (comparator) {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, undefined, comparator)\n    : [];\n});\n\nexport default intersectionWith;\n"],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,IAACA,gBAAgB,GAAGC,QAAQ,CAAC,UAASC,MAAM,EAAE;EAC/C,IAAIC,UAAU,GAAGC,IAAI,CAACF,MAAM,CAAC;IACzBG,MAAM,GAAGC,QAAQ,CAACJ,MAAM,EAAEK,mBAAmB,CAAC;EAElDJ,UAAU,GAAG,OAAOA,UAAU,IAAI,UAAU,GAAGA,UAAU,GAAGK,SAAS;EACrE,IAAIL,UAAU,EAAE;IACdE,MAAM,CAACI,GAAG,EAAE;EAChB;EACE,OAAQJ,MAAM,CAACK,MAAM,IAAIL,MAAM,CAAC,CAAC,CAAC,KAAKH,MAAM,CAAC,CAAC,CAAC,GAC5CS,gBAAgB,CAACN,MAAM,EAAEG,SAAS,EAAEL,UAAU,CAAC,GAC/C,EAAE;AACR,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}