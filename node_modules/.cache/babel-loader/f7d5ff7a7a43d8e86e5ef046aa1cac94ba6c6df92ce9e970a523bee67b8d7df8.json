{"ast":null,"code":"import { defineComponent } from 'vue';\nimport '../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/lodash.mjs';\nimport { registerMixin } from '@vuemap/vue-amap-util';\nimport merge from '../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/merge.mjs';\nvar script = defineComponent({\n  name: \"ElAmapGeojson\",\n  mixins: [registerMixin],\n  props: {\n    geo: {\n      type: Object,\n      required: true\n    },\n    markerOptions: {\n      type: Object\n    },\n    getMarker: {\n      type: Function\n    },\n    polylineOptions: {\n      type: Object\n    },\n    getPolyline: {\n      type: Function\n    },\n    polygonOptions: {\n      type: Object\n    },\n    getPolygon: {\n      type: Function\n    }\n  },\n  data() {\n    return {\n      propsRedirect: {\n        geo: \"geoJSON\"\n      },\n      converters: {}\n    };\n  },\n  methods: {\n    __initComponent(options) {\n      return new Promise(resolve => {\n        AMap.plugin([\"AMap.GeoJSON\"], () => {\n          if (!options.getMarker) {\n            options.getMarker = this.createMarker;\n          }\n          if (!options.getPolyline) {\n            options.getPolyline = this.createPolyline;\n          }\n          if (!options.getPolygon) {\n            options.getPolygon = this.createPolygon;\n          }\n          this.$amapComponent = new AMap.GeoJSON(options);\n          this.$parentComponent.add(this.$amapComponent);\n          resolve();\n        });\n      });\n    },\n    createMarker(geojson, lnglat) {\n      let options = this.markerOptions || {};\n      options = merge({}, options, geojson.properties);\n      options.position = lnglat;\n      return new AMap.Marker(options);\n    },\n    createPolyline(geojson, lnglat) {\n      let options = this.polylineOptions || {};\n      options = merge({}, options, geojson.properties);\n      options.path = lnglat;\n      return new AMap.Polyline(options);\n    },\n    createPolygon(geojson, lnglat) {\n      let options = this.polygonOptions || {};\n      options = merge({}, options, geojson.properties);\n      options.path = lnglat;\n      return new AMap.Polygon(options);\n    },\n    destroyComponent() {\n      if (!this.parentInstance.isDestroy) {\n        this.$parentComponent.remove(this.$amapComponent);\n      }\n      this.$amapComponent = null;\n      this.$parentComponent = null;\n    },\n    __geoJSON(value) {\n      if (this.$amapComponent) {\n        this.$amapComponent.importData(value);\n      }\n    }\n  },\n  render() {\n    return null;\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","mixins","registerMixin","props","geo","type","Object","required","markerOptions","getMarker","Function","polylineOptions","getPolyline","polygonOptions","getPolygon","data","propsRedirect","converters","methods","__initComponent","options","Promise","resolve","AMap","plugin","createMarker","createPolyline","createPolygon","$amapComponent","GeoJSON","$parentComponent","add","geojson","lnglat","merge","properties","position","Marker","path","Polyline","Polygon","destroyComponent","parentInstance","isDestroy","remove","__geoJSON","value","importData","render"],"sources":["../../../../packages/vector/GeoJSON/GeoJSON.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport {defineComponent} from \"vue\";\r\nimport {merge} from 'lodash-es';\r\nimport {registerMixin,isMapInstance, isOverlayGroupInstance, isVectorLayerInstance} from '@vuemap/vue-amap-util';\r\n\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapGeojson',\r\n  mixins: [registerMixin],\r\n  props: {\r\n    geo: {\r\n      type: Object,\r\n      required: true\r\n    }, // 要加载的标准GeoJSON对象\r\n    markerOptions: {\r\n      type: Object\r\n    }, // marker的默认样式\r\n    getMarker: {\r\n      type: Function\r\n    }, // 指定点要素的绘制方式，缺省时为Marker的默认样式。geojson为当前要素对应的GeoJSON对象，lnglats为对应的线的路径\r\n    polylineOptions: {\r\n      type: Object\r\n    }, // polyline的默认样式\r\n    getPolyline: {\r\n      type: Function\r\n    }, // 指定线要素的绘制方式，缺省时为Polyline的默认样式。geojson为当前要素对应的GeoJSON对象，lnglats为对应的线的路径\r\n    polygonOptions: {\r\n      type: Object\r\n    }, // polygon的默认样式\r\n    getPolygon: {\r\n      type: Function\r\n    } // 指定面要素的绘制方式，缺省时为Polygon的默认样式。geojson为当前要素对应的GeoJSON对象，lnglats为对应的线的路径\r\n  },\r\n  data() {\r\n    return {\r\n      propsRedirect: {\r\n        geo: 'geoJSON'\r\n      },\r\n      converters: {},\r\n    };\r\n  },\r\n  methods: {\r\n    __initComponent(options) {\r\n      return new Promise<void>((resolve) => {\r\n        AMap.plugin(['AMap.GeoJSON'], () => {\r\n          if (!options.getMarker) {\r\n            options.getMarker = this.createMarker;\r\n          }\r\n          if (!options.getPolyline) {\r\n            options.getPolyline = this.createPolyline;\r\n          }\r\n          if (!options.getPolygon) {\r\n            options.getPolygon = this.createPolygon;\r\n          }\r\n          this.$amapComponent = new AMap.GeoJSON(options);\r\n          this.$parentComponent.add(this.$amapComponent);\r\n          resolve();\r\n        });\r\n      });\r\n    },\r\n    createMarker(geojson, lnglat) {\r\n      let options = this.markerOptions || {};\r\n      options = merge({}, options, geojson.properties);\r\n      options.position = lnglat;\r\n      return new AMap.Marker(options);\r\n    },\r\n    createPolyline(geojson, lnglat) {\r\n      let options = this.polylineOptions || {};\r\n      options = merge({}, options, geojson.properties);\r\n      options.path = lnglat;\r\n      return new AMap.Polyline(options);\r\n    },\r\n    createPolygon(geojson, lnglat) {\r\n      let options = this.polygonOptions || {};\r\n      options = merge({}, options, geojson.properties);\r\n      options.path = lnglat;\r\n      return new AMap.Polygon(options);\r\n    },\r\n    destroyComponent() {\r\n      if(!this.parentInstance.isDestroy){\r\n        this.$parentComponent.remove(this.$amapComponent);\r\n      }\r\n      this.$amapComponent = null;\r\n      this.$parentComponent = null;\r\n    },\r\n    __geoJSON(value) {\r\n      if(this.$amapComponent){\r\n        this.$amapComponent.importData(value);\r\n      }\r\n    }\r\n  },\r\n  render(){\r\n    return null;\r\n  }\r\n});\r\n</script>\r\n"],"mappings":";;;;AAMA,IAAAA,MAAA,GAAeC,eAAgB;EAC7BC,IAAM;EACNC,MAAA,EAAQ,CAACC,aAAA;EACTC,KAAO;IACLC,GAAK;MACHC,IAAM,EAAAC,MAAA;MACNC,QAAU;IAAA;IAEZC,aAAe;MACbH,IAAM,EAAAC;IAAA;IAERG,SAAW;MACTJ,IAAM,EAAAK;IAAA;IAERC,eAAiB;MACfN,IAAM,EAAAC;IAAA;IAERM,WAAa;MACXP,IAAM,EAAAK;IAAA;IAERG,cAAgB;MACdR,IAAM,EAAAC;IAAA;IAERQ,UAAY;MACVT,IAAM,EAAAK;IAAA;EAAA;EAGVK,IAAOA,CAAA;IACE;MACLC,aAAe;QACbZ,GAAK;MAAA;MAEPa,UAAY;IAAA;EAAA;EAGhBC,OAAS;IACPC,gBAAgBC,OAAS;MAChB,WAAIC,OAAc,CAACC,OAAY;QAC/BC,IAAA,CAAAC,MAAA,CAAO,CAAC,iBAAiB,MAAM;UAC9B,KAACJ,OAAA,CAAQX,SAAW;YACtBW,OAAA,CAAQX,SAAA,GAAY,IAAK,CAAAgB,YAAA;UAAA;UAEvB,KAACL,OAAA,CAAQR,WAAa;YACxBQ,OAAA,CAAQR,WAAA,GAAc,IAAK,CAAAc,cAAA;UAAA;UAEzB,KAACN,OAAA,CAAQN,UAAY;YACvBM,OAAA,CAAQN,UAAA,GAAa,IAAK,CAAAa,aAAA;UAAA;UAEvB,KAAAC,cAAA,GAAiB,IAAIL,IAAA,CAAKM,OAAQ,CAAAT,OAAA;UAClC,KAAAU,gBAAA,CAAiBC,GAAA,CAAI,IAAK,CAAAH,cAAA;UAC/BN,OAAA;QAAA;MAAA;IAAA;IAING,aAAaO,OAAA,EAASC,MAAQ;MACxB,IAAAb,OAAA,GAAU,KAAKZ,aAAiB;MAC1BY,OAAA,GAAAc,KAAA,CAAM,EAAI,EAAAd,OAAA,EAASY,OAAQ,CAAAG,UAAA;MACrCf,OAAA,CAAQgB,QAAW,GAAAH,MAAA;MACZ,WAAIV,IAAA,CAAKc,MAAO,CAAAjB,OAAA;IAAA;IAEzBM,eAAeM,OAAA,EAASC,MAAQ;MAC1B,IAAAb,OAAA,GAAU,KAAKT,eAAmB;MAC5BS,OAAA,GAAAc,KAAA,CAAM,EAAI,EAAAd,OAAA,EAASY,OAAQ,CAAAG,UAAA;MACrCf,OAAA,CAAQkB,IAAO,GAAAL,MAAA;MACR,WAAIV,IAAA,CAAKgB,QAAS,CAAAnB,OAAA;IAAA;IAE3BO,cAAcK,OAAA,EAASC,MAAQ;MACzB,IAAAb,OAAA,GAAU,KAAKP,cAAkB;MAC3BO,OAAA,GAAAc,KAAA,CAAM,EAAI,EAAAd,OAAA,EAASY,OAAQ,CAAAG,UAAA;MACrCf,OAAA,CAAQkB,IAAO,GAAAL,MAAA;MACR,WAAIV,IAAA,CAAKiB,OAAQ,CAAApB,OAAA;IAAA;IAE1BqB,gBAAmBA,CAAA;MACd,KAAC,IAAK,CAAAC,cAAA,CAAeC,SAAU;QAC3B,KAAAb,gBAAA,CAAiBc,MAAA,CAAO,IAAK,CAAAhB,cAAA;MAAA;MAEpC,KAAKA,cAAiB;MACtB,KAAKE,gBAAmB;IAAA;IAE1Be,UAAUC,KAAO;MACf,IAAG,KAAKlB,cAAe;QACrB,KAAKA,cAAA,CAAemB,UAAW,CAAAD,KAAA;MAAA;IAAA;EAAA;EAIrCE,MAAQA,CAAA;IACC;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}