{"ast":null,"code":"import baseRepeat from './_baseRepeat.mjs';\nimport baseToString from './_baseToString.mjs';\nimport castSlice from './_castSlice.mjs';\nimport hasUnicode from './_hasUnicode.mjs';\nimport stringSize from './_stringSize.mjs';\nimport stringToArray from './_stringToArray.mjs';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);\n}\nexport { createPadding as default };","map":{"version":3,"names":["nativeCeil","Math","ceil","createPadding","length","chars","undefined","baseToString","charsLength","baseRepeat","result","stringSize","hasUnicode","castSlice","stringToArray","join","slice"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_createPadding.js"],"sourcesContent":["import baseRepeat from './_baseRepeat.js';\nimport baseToString from './_baseToString.js';\nimport castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport stringSize from './_stringSize.js';\nimport stringToArray from './_stringToArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars)\n    ? castSlice(stringToArray(result), 0, length).join('')\n    : result.slice(0, length);\n}\n\nexport default createPadding;\n"],"mappings":";;;;;;;AAOA;AACA,IAAIA,UAAU,GAAGC,IAAI,CAACC,IAAI;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,MAAM,EAAEC,KAAK,EAAE;EACpCA,KAAK,GAAGA,KAAK,KAAKC,SAAS,GAAG,GAAG,GAAGC,YAAY,CAACF,KAAK,CAAC;EAEvD,IAAIG,WAAW,GAAGH,KAAK,CAACD,MAAM;EAC9B,IAAII,WAAW,GAAG,CAAC,EAAE;IACnB,OAAOA,WAAW,GAAGC,UAAU,CAACJ,KAAK,EAAED,MAAM,CAAC,GAAGC,KAAK;EAC1D;EACE,IAAIK,MAAM,GAAGD,UAAU,CAACJ,KAAK,EAAEL,UAAU,CAACI,MAAM,GAAGO,UAAU,CAACN,KAAK,CAAC,CAAC,CAAC;EACtE,OAAOO,UAAU,CAACP,KAAK,CAAC,GACpBQ,SAAS,CAACC,aAAa,CAACJ,MAAM,CAAC,EAAE,CAAC,EAAEN,MAAM,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,GACpDL,MAAM,CAACM,KAAK,CAAC,CAAC,EAAEZ,MAAM,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}