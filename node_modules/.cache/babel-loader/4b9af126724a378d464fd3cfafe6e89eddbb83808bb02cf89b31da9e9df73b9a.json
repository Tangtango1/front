{"ast":null,"code":"import SetCache from './_SetCache.mjs';\nimport arrayIncludes from './_arrayIncludes.mjs';\nimport arrayIncludesWith from './_arrayIncludesWith.mjs';\nimport cacheHas from './_cacheHas.mjs';\nimport createSet from './_createSet.mjs';\nimport setToArray from './_setToArray.mjs';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n    includes = arrayIncludes,\n    length = array.length,\n    isCommon = true,\n    result = [],\n    seen = result;\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  } else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache();\n  } else {\n    seen = iteratee ? [] : result;\n  }\n  outer: while (++index < length) {\n    var value = array[index],\n      computed = iteratee ? iteratee(value) : value;\n    value = comparator || value !== 0 ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    } else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\nexport { baseUniq as default };","map":{"version":3,"names":["LARGE_ARRAY_SIZE","baseUniq","array","iteratee","comparator","index","includes","arrayIncludes","length","isCommon","result","seen","arrayIncludesWith","set","createSet","setToArray","cacheHas","SetCache","outer","value","computed","seenIndex","push"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseUniq.js"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport cacheHas from './_cacheHas.js';\nimport createSet from './_createSet.js';\nimport setToArray from './_setToArray.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseUniq;\n"],"mappings":";;;;;;;AAOA;AACA,IAAIA,gBAAgB,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EAC7C,IAAIC,KAAK,GAAG,CAAC,CAAC;IACVC,QAAQ,GAAGC,aAAa;IACxBC,MAAM,GAAGN,KAAK,CAACM,MAAM;IACrBC,QAAQ,GAAG,IAAI;IACfC,MAAM,GAAG,EAAE;IACXC,IAAI,GAAGD,MAAM;EAEjB,IAAIN,UAAU,EAAE;IACdK,QAAQ,GAAG,KAAK;IAChBH,QAAQ,GAAGM,iBAAiB;EAChC,CAAG,MACI,IAAIJ,MAAM,IAAIR,gBAAgB,EAAE;IACnC,IAAIa,GAAG,GAAGV,QAAQ,GAAG,IAAI,GAAGW,SAAS,CAACZ,KAAK,CAAC;IAC5C,IAAIW,GAAG,EAAE;MACP,OAAOE,UAAU,CAACF,GAAG,CAAC;IAC5B;IACIJ,QAAQ,GAAG,KAAK;IAChBH,QAAQ,GAAGU,QAAQ;IACnBL,IAAI,GAAG,IAAIM,QAAQ,CAAR,CAAQ;EACvB,CAAG,MACI;IACHN,IAAI,GAAGR,QAAQ,GAAG,EAAE,GAAGO,MAAM;EACjC;EACEQ,KAAK,EACL,OAAO,EAAEb,KAAK,GAAGG,MAAM,EAAE;IACvB,IAAIW,KAAK,GAAGjB,KAAK,CAACG,KAAK,CAAC;MACpBe,QAAQ,GAAGjB,QAAQ,GAAGA,QAAQ,CAACgB,KAAK,CAAC,GAAGA,KAAK;IAEjDA,KAAK,GAAIf,UAAU,IAAIe,KAAK,KAAK,CAAC,GAAIA,KAAK,GAAG,CAAC;IAC/C,IAAIV,QAAQ,IAAIW,QAAQ,KAAKA,QAAQ,EAAE;MACrC,IAAIC,SAAS,GAAGV,IAAI,CAACH,MAAM;MAC3B,OAAOa,SAAS,EAAE,EAAE;QAClB,IAAIV,IAAI,CAACU,SAAS,CAAC,KAAKD,QAAQ,EAAE;UAChC,SAASF,KAAK;QACxB;MACA;MACM,IAAIf,QAAQ,EAAE;QACZQ,IAAI,CAACW,IAAI,CAACF,QAAQ,CAAC;MAC3B;MACMV,MAAM,CAACY,IAAI,CAACH,KAAK,CAAC;IACxB,CAAK,MACI,IAAI,CAACb,QAAQ,CAACK,IAAI,EAAES,QAAQ,EAAEhB,UAAU,CAAC,EAAE;MAC9C,IAAIO,IAAI,KAAKD,MAAM,EAAE;QACnBC,IAAI,CAACW,IAAI,CAACF,QAAQ,CAAC;MAC3B;MACMV,MAAM,CAACY,IAAI,CAACH,KAAK,CAAC;IACxB;EACA;EACE,OAAOT,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}