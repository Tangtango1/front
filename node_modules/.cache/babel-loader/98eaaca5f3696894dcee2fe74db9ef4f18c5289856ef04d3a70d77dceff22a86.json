{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { registerMixin } from '@vuemap/vue-amap-util';\nvar script = defineComponent({\n  name: \"ElAmapCircleMarker\",\n  mixins: [registerMixin],\n  props: {\n    zIndex: {\n      type: Number\n    },\n    center: {\n      type: Array,\n      required: true\n    },\n    bubble: {\n      type: Boolean,\n      default: false\n    },\n    cursor: {\n      type: String\n    },\n    radius: {\n      type: Number\n    },\n    strokeColor: {\n      type: String\n    },\n    strokeOpacity: {\n      type: Number\n    },\n    strokeWeight: {\n      type: Number\n    },\n    fillColor: {\n      type: String\n    },\n    fillOpacity: {\n      type: Number\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    extData: {\n      type: Object\n    }\n  },\n  emits: [\"update:center\"],\n  data() {\n    return {\n      converters: {},\n      handlers: {}\n    };\n  },\n  methods: {\n    __initComponent(options) {\n      this.$parentComponent = this.parentInstance.$amapComponent;\n      this.$amapComponent = new AMap.CircleMarker(options);\n      this.$parentComponent.add(this.$amapComponent);\n      this.bindModelEvents();\n    },\n    bindModelEvents() {\n      this.$amapComponent.on(\"dragend\", () => {\n        this.emitPosition();\n      });\n      this.$amapComponent.on(\"touchend\", () => {\n        this.emitPosition();\n      });\n    },\n    emitPosition() {\n      const center = this.$amapComponent.getCenter();\n      this.$emit(\"update:center\", center.toArray());\n    },\n    destroyComponent() {\n      if (!this.parentInstance.isDestroy) {\n        this.$parentComponent.remove(this.$amapComponent);\n      }\n      this.$amapComponent = null;\n    },\n    __strokeColor(value) {\n      this.$amapComponent.setOptions({\n        strokeColor: value\n      });\n    },\n    __strokeOpacity(value) {\n      this.$amapComponent.setOptions({\n        strokeOpacity: value\n      });\n    },\n    __strokeWeight(value) {\n      this.$amapComponent.setOptions({\n        strokeWeight: value\n      });\n    },\n    __fillColor(value) {\n      this.$amapComponent.setOptions({\n        fillColor: value\n      });\n    },\n    __fillOpacity(value) {\n      this.$amapComponent.setOptions({\n        fillOpacity: value\n      });\n    }\n  },\n  render() {\n    return null;\n  }\n});\nexport { script as default };","map":{"version":3,"names":["script","defineComponent","name","mixins","registerMixin","props","zIndex","type","Number","center","Array","required","bubble","Boolean","default","cursor","String","radius","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","draggable","extData","Object","emits","data","converters","handlers","methods","__initComponent","options","$parentComponent","parentInstance","$amapComponent","AMap","CircleMarker","add","bindModelEvents","on","emitPosition","getCenter","$emit","toArray","destroyComponent","isDestroy","remove","__strokeColor","value","setOptions","__strokeOpacity","__strokeWeight","__fillColor","__fillOpacity","render"],"sources":["../../../../packages/marker/CircleMarker/CircleMarker.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport {defineComponent} from \"vue\";\r\nimport {registerMixin} from '@vuemap/vue-amap-util';\r\n\r\nexport default defineComponent({\r\n  name: 'ElAmapCircleMarker',\r\n  mixins: [registerMixin],\r\n  props: {\r\n    zIndex: {\r\n      type: Number\r\n    },\r\n    center: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    bubble: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    cursor: {\r\n      type: String\r\n    },\r\n    radius: {\r\n      type: Number\r\n    },\r\n    strokeColor: {\r\n      type: String\r\n    },\r\n    strokeOpacity: {\r\n      type: Number\r\n    },\r\n    strokeWeight: {\r\n      type: Number\r\n    },\r\n    fillColor: {\r\n      type: String\r\n    },\r\n    fillOpacity: {\r\n      type: Number\r\n    },\r\n    draggable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    extData: {\r\n      type: Object\r\n    }\r\n  },\r\n\r\n  emits: ['update:center'],\r\n\r\n  data() {\r\n    return {\r\n      converters: {},\r\n      handlers: {}\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    __initComponent(options) {\r\n      this.$parentComponent = this.parentInstance.$amapComponent;\r\n      this.$amapComponent = new AMap.CircleMarker(options);\r\n      this.$parentComponent.add(this.$amapComponent);\r\n      this.bindModelEvents();\r\n    },\r\n    bindModelEvents(){\r\n      this.$amapComponent.on('dragend',() => {\r\n        this.emitPosition();\r\n      });\r\n      this.$amapComponent.on('touchend',() => {\r\n        this.emitPosition();\r\n      });\r\n    },\r\n    emitPosition(){\r\n      const center = this.$amapComponent.getCenter();\r\n      this.$emit('update:center', center.toArray());\r\n    },\r\n    destroyComponent() {\r\n      // this.$parentComponent.remove(this.$amapComponent);\r\n      if(!this.parentInstance.isDestroy){\r\n        this.$parentComponent.remove(this.$amapComponent);\r\n      }\r\n      this.$amapComponent = null;\r\n    },\r\n    __strokeColor(value) {\r\n      this.$amapComponent.setOptions({\r\n        strokeColor: value\r\n      });\r\n    },\r\n    __strokeOpacity(value) {\r\n      this.$amapComponent.setOptions({\r\n        strokeOpacity: value\r\n      });\r\n    },\r\n    __strokeWeight(value) {\r\n      this.$amapComponent.setOptions({\r\n        strokeWeight: value\r\n      });\r\n    },\r\n    __fillColor(value) {\r\n      this.$amapComponent.setOptions({\r\n        fillColor: value\r\n      });\r\n    },\r\n    __fillOpacity(value) {\r\n      this.$amapComponent.setOptions({\r\n        fillOpacity: value\r\n      });\r\n    }\r\n  },\r\n  render() {\r\n    return null;\r\n  }\r\n});\r\n</script>\r\n"],"mappings":";;AAIA,IAAAA,MAAA,GAAeC,eAAgB;EAC7BC,IAAM;EACNC,MAAA,EAAQ,CAACC,aAAA;EACTC,KAAO;IACLC,MAAQ;MACNC,IAAM,EAAAC;IAAA;IAERC,MAAQ;MACNF,IAAM,EAAAG,KAAA;MACNC,QAAU;IAAA;IAEZC,MAAQ;MACNL,IAAM,EAAAM,OAAA;MACNC,OAAS;IAAA;IAEXC,MAAQ;MACNR,IAAM,EAAAS;IAAA;IAERC,MAAQ;MACNV,IAAM,EAAAC;IAAA;IAERU,WAAa;MACXX,IAAM,EAAAS;IAAA;IAERG,aAAe;MACbZ,IAAM,EAAAC;IAAA;IAERY,YAAc;MACZb,IAAM,EAAAC;IAAA;IAERa,SAAW;MACTd,IAAM,EAAAS;IAAA;IAERM,WAAa;MACXf,IAAM,EAAAC;IAAA;IAERe,SAAW;MACThB,IAAM,EAAAM,OAAA;MACNC,OAAS;IAAA;IAEXU,OAAS;MACPjB,IAAM,EAAAkB;IAAA;EAAA;EAIVC,KAAA,EAAO,CAAC;EAERC,IAAOA,CAAA;IACE;MACLC,UAAY;MACZC,QAAU;IAAA;EAAA;EAIdC,OAAS;IACPC,gBAAgBC,OAAS;MAClB,KAAAC,gBAAA,GAAmB,KAAKC,cAAe,CAAAC,cAAA;MACvC,KAAAA,cAAA,GAAiB,IAAIC,IAAA,CAAKC,YAAa,CAAAL,OAAA;MACvC,KAAAC,gBAAA,CAAiBK,GAAA,CAAI,IAAK,CAAAH,cAAA;MAC1B,KAAAI,eAAA;IAAA;IAEPA,eAAiBA,CAAA;MACV,KAAAJ,cAAA,CAAeK,EAAG,YAAU,MAAM;QAChC,KAAAC,YAAA;MAAA;MAEF,KAAAN,cAAA,CAAeK,EAAG,aAAW,MAAM;QACjC,KAAAC,YAAA;MAAA;IAAA;IAGTA,YAAcA,CAAA;MACN,MAAAhC,MAAA,GAAS,KAAK0B,cAAe,CAAAO,SAAA;MAC9B,KAAAC,KAAA,CAAM,iBAAiBlC,MAAO,CAAAmC,OAAA;IAAA;IAErCC,gBAAmBA,CAAA;MAEd,KAAC,IAAK,CAAAX,cAAA,CAAeY,SAAU;QAC3B,KAAAb,gBAAA,CAAiBc,MAAA,CAAO,IAAK,CAAAZ,cAAA;MAAA;MAEpC,KAAKA,cAAiB;IAAA;IAExBa,cAAcC,KAAO;MACnB,KAAKd,cAAA,CAAee,UAAW;QAC7BhC,WAAa,EAAA+B;MAAA;IAAA;IAGjBE,gBAAgBF,KAAO;MACrB,KAAKd,cAAA,CAAee,UAAW;QAC7B/B,aAAe,EAAA8B;MAAA;IAAA;IAGnBG,eAAeH,KAAO;MACpB,KAAKd,cAAA,CAAee,UAAW;QAC7B9B,YAAc,EAAA6B;MAAA;IAAA;IAGlBI,YAAYJ,KAAO;MACjB,KAAKd,cAAA,CAAee,UAAW;QAC7B7B,SAAW,EAAA4B;MAAA;IAAA;IAGfK,cAAcL,KAAO;MACnB,KAAKd,cAAA,CAAee,UAAW;QAC7B5B,WAAa,EAAA2B;MAAA;IAAA;EAAA;EAInBM,MAASA,CAAA;IACA;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}