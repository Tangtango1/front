{"ast":null,"code":"import Symbol from './_Symbol.mjs';\nimport arrayMap from './_arrayMap.mjs';\nimport isArray from './isArray.mjs';\nimport isSymbol from './isSymbol.mjs';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n  symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\nexport { baseToString as default };","map":{"version":3,"names":["INFINITY","symbolProto","Symbol","prototype","undefined","symbolToString","toString","baseToString","value","isArray","arrayMap","isSymbol","call","result"],"sources":["../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseToString.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n"],"mappings":";;;;;AAKA;AACA,IAAIA,QAAQ,GAAG,CAAC,GAAG,CAAC;;AAEpB;AACA,IAAIC,WAAW,GAAGC,MAAM,GAAGA,MAAM,CAACC,SAAS,GAAGC,SAAS;EACnDC,cAAc,GAAGJ,WAAW,GAAGA,WAAW,CAACK,QAAQ,GAAGF,SAAS;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAYA,CAACC,KAAK,EAAE;EAC7B;EACE,IAAI,OAAOA,KAAK,IAAI,QAAQ,EAAE;IAC5B,OAAOA,KAAK;EAChB;EACE,IAAIC,OAAO,CAACD,KAAK,CAAC,EAAE;IACtB;IACI,OAAOE,QAAQ,CAACF,KAAK,EAAED,YAAY,CAAC,GAAG,EAAE;EAC7C;EACE,IAAII,QAAQ,CAACH,KAAK,CAAC,EAAE;IACnB,OAAOH,cAAc,GAAGA,cAAc,CAACO,IAAI,CAACJ,KAAK,CAAC,GAAG,EAAE;EAC3D;EACE,IAAIK,MAAM,GAAIL,KAAK,GAAG,EAAG;EACzB,OAAQK,MAAM,IAAI,GAAG,IAAK,CAAC,GAAGL,KAAK,IAAK,CAACR,QAAQ,GAAI,IAAI,GAAGa,MAAM;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}